<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Impart</name>
    </assembly>
    <members>
        <member name="T:Impart.Api.Rest">
            <summary>The class for hosting a REST API.</summary>
        </member>
        <member name="P:Impart.Api.Rest.Port">
            <summary>The value of the localhost port the API is being hosted on.</summary>
        </member>
        <member name="F:Impart.Api.Rest.Error">
            <summary>The method to be called in the event of an error.</summary>
        </member>
        <member name="M:Impart.Api.Rest.#ctor(System.Int32)">
            <summary>Creates a Rest instance with <paramref name="port"/> as the port.</summary>
            <param name="port">The port to host on. (Default is 8080)</param>
        </member>
        <member name="M:Impart.Api.Rest.Start">
            <summary>Start the Rest API.</summary>
        </member>
        <member name="M:Impart.Api.Rest.Stop">
            <summary>Stop the Rest API.</summary>
        </member>
        <member name="T:Impart.Api.Rest.RestRequest">
            <summary>Attribute to hook Rest routes to methods.</summary>
        </member>
        <member name="P:Impart.Api.Rest.RestRequest.Route">
            <summary>The Rest route.</summary>
        </member>
        <member name="M:Impart.Api.Rest.RestRequest.#ctor(System.String)">
            <summary>Creates a RestRequest instance.</summary>
            <param name="route">The route to hook the method to.</param>
        </member>
        <member name="T:Impart.Api.Soap">
            <summary>The class for hosting a SOAP API.</summary>
        </member>
        <member name="P:Impart.Api.Soap.Port">
            <summary>The value of the localhost port the API is being hosted on.</summary>
        </member>
        <member name="F:Impart.Api.Soap.Error">
            <summary>The method to be called in the event of an error.</summary>
        </member>
        <member name="M:Impart.Api.Soap.#ctor(System.Int32)">
            <summary>Creates a Soap instance.</summary>
            <param name="port">The port to host on. (Default is 7070)</param>
        </member>
        <member name="M:Impart.Api.Soap.Start">
            <summary>Start the Soap API.</summary>
        </member>
        <member name="M:Impart.Api.Soap.Stop">
            <summary>Stop the Soap API.</summary>
        </member>
        <member name="T:Impart.Api.Soap.SoapRequest">
            <summary>Attribute to hook Soap routes to methods.</summary>
        </member>
        <member name="P:Impart.Api.Soap.SoapRequest.Route">
            <summary>The Soap route.</summary>
        </member>
        <member name="M:Impart.Api.Soap.SoapRequest.#ctor(System.String)">
            <summary>Creates a SoapRequest instance.</summary>
            <param name="route">The route to hook the method to.</param>
        </member>
        <member name="T:Impart.Api.ErrorContext">
            <summary>Information about an error from an API.</summary>
        </member>
        <member name="P:Impart.Api.ErrorContext.Type">
            <summary>The error type.</summary>
        </member>
        <member name="M:Impart.Api.ErrorContext.#ctor(System.Net.Sockets.Socket,Impart.Api.ErrorType)">
            <summary>Creates an ErrorContext instance.</summary>
            <param name="socket">The Socket handling the API.</param>
            <param name="type">The ErrorType.</param>
        </member>
        <member name="M:Impart.Api.ErrorContext.Respond(System.String)">
            <summary>Respond to the context.</summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:Impart.Api.RestContext">
            <summary>Information about a RestContext.</summary>
        </member>
        <member name="M:Impart.Api.RestContext.#ctor(System.Net.Sockets.Socket)">
            <summary>Creates an RestContext instance.</summary>
            <param name="socket">The Socket handling the API.</param>
        </member>
        <member name="M:Impart.Api.RestContext.Respond(System.String)">
            <summary>Respond to the context.</summary>
            <param name="response">The JSON response.</param>
        </member>
        <member name="T:Impart.Api.SoapContext">
            <summary>Information about a SoapContext.</summary>
        </member>
        <member name="M:Impart.Api.SoapContext.#ctor(System.Net.Sockets.Socket)">
            <summary>Creates an SoapContext instance.</summary>
            <param name="socket">The Socket handling the API.</param>
        </member>
        <member name="M:Impart.Api.SoapContext.Respond(System.String)">
            <summary>Respond to the context.</summary>
            <param name="response">The XML response.</param>
        </member>
        <member name="T:Impart.Api.APIEventArgs">
            <summary>Information about current API event.</summary>
        </member>
        <member name="F:Impart.Api.APIEventArgs.Request">
            <summary>The type of request that was sent.</summary>
        </member>
        <member name="F:Impart.Api.APIEventArgs.Time">
            <summary>The time the request was sent.</summary>
        </member>
        <member name="M:Impart.Api.APIEventArgs.#ctor(Impart.Api.RequestType)">
            <summary>Creates an APIEventArgs instance with <paramref name="request"/> as the request type.</summary>
            <param name="request">The request type.</param>
        </member>
        <member name="T:Impart.Api.ErrorType">
            <summary>All of the API server-side error types.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.BadRequest">
            <summary>BadRequest error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.Unauthorized">
            <summary>Unauthorized error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.PaymentRequired">
            <summary>PaymentRequired error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.Forbidden">
            <summary>Forbidden error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.NotFound">
            <summary>NotFound error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.MethodNotAllowed">
            <summary>MethodNotAllowed error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.NotAcceptable">
            <summary>NotAcceptable error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.ProxyAuthenticationRequired">
            <summary>ProxyAuthenticationRequired error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.RequestTimeout">
            <summary>RequestTimeout error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.Conflict">
            <summary>Conflict error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.Gone">
            <summary>Gone error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.LengthRequest">
            <summary>LengthRequest error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.PreconditionFailed">
            <summary>PreconditionFailed error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.PayloadTooLarge">
            <summary>PayloadTooLarge error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.URITooLong">
            <summary>URITooLong error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.UnsupportedMediaType">
            <summary>UnsupportedMediaType error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.RangeNotSatisfiable">
            <summary>RangeNotSatisfiable error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.ExpectationFailed">
            <summary>ExpectationFailed error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.MisdirectedRequest">
            <summary>MisdirectedRequest error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.UnprocessableEntity">
            <summary>UnprocessableEntity error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.Locked">
            <summary>Locked error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.FailedDependency">
            <summary>FailedDependency error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.TooEarly">
            <summary>TooEarly error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.UpgradeRequired">
            <summary>UpgradeRequired error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.PreconditionRequired">
            <summary>PreconditionRequired error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.TooManyRequests">
            <summary>TooManyRequests error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.RequestHeaderFieldsTooLarge">
            <summary>RequestHeaderFieldsTooLarge error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.UnavailableForLegalReasons">
            <summary>UnavailableForLegalReasons error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.InternalServerError">
            <summary>InternalServerError error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.NotImplemented">
            <summary>NotImplemented error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.BadGateway">
            <summary>BadGateway error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.ServiceUnavailable">
            <summary>ServiceUnavailable error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.GatewayTimeout">
            <summary>GatewayTimeout error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.HTTPVersionNotSupported">
            <summary>HTTPVersionNotSupported error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.VariantAlsoNegotiates">
            <summary>VariantAlsoNegotiates error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.InsufficientStorage">
            <summary>InsufficientStorage error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.LoopDetected">
            <summary>LoopDetected error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.NotExtended">
            <summary>NotExtended error.</summary>
        </member>
        <member name="F:Impart.Api.ErrorType.NetworkAuthenticationRequired">
            <summary>NetworkAuthenticationRequired error.</summary>
        </member>
        <member name="T:Impart.Api.RequestType">
            <summary>All of the request types.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Get">
            <summary>GET HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Push">
            <summary>PUSH HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Put">
            <summary>PUT HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Delete">
            <summary>DELETE HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Head">
            <summary>HEAD HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Connect">
            <summary>CONNECT HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Options">
            <summary>OPTIONS HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Trace">
            <summary>TRACE HTTP request.</summary>
        </member>
        <member name="F:Impart.Api.RequestType.Patch">
            <summary>PATCH HTTP request.</summary>
        </member>
        <member name="T:Impart.Data.Color">
            <summary>The class for generating random colors.</summary>
        </member>
        <member name="M:Impart.Data.Color.Rgb">
            <summary>Generates a random Rgb value.</summary>
        </member>
        <member name="M:Impart.Data.Color.Rgbs(System.Int32)">
            <summary>Generates a random Rgb value array with <paramref name="number"/> as the number of elements in the array.</summary>
            <param name="number">The number of elements in the array.</param>
        </member>
        <member name="M:Impart.Data.Color.Hsl">
            <summary>Generates a random Hsl value.</summary>
        </member>
        <member name="M:Impart.Data.Color.Hsls(System.Int32)">
            <summary>Generates a random Hsl value array with <paramref name="number"/> as the number of elements in the array.</summary>
            <param name="number">The number of elements in the array.</param>
        </member>
        <member name="M:Impart.Data.Color.Hex">
            <summary>Generates a random Hex value.</summary>
        </member>
        <member name="M:Impart.Data.Color.Hexes(System.Int32)">
            <summary>Generates a random Hex value array with <paramref name="number"/> as the number of elements in the array.</summary>
            <param name="number">The number of elements in the array.</param>
        </member>
        <member name="T:Impart.Data.Letter">
            <summary>Randomly generate a letter.</summary>
        </member>
        <member name="M:Impart.Data.Letter.Alphabet(System.Nullable{System.Boolean})">
            <summary>Randomly generate an alphabetical character.</summary>
            <param name="type">Whether to generate an uppercase or lowercase letter. Null: uppercase and lowercase</param>
        </member>
        <member name="M:Impart.Data.Letter.Number">
            <summary>Randomly generate an numerical character.</summary>
        </member>
        <member name="M:Impart.Data.Letter.Special">
            <summary>Randomly generate a special character.</summary>
        </member>
        <member name="M:Impart.Data.Letter.Any">
            <summary>Randomly generate any character.</summary>
        </member>
        <member name="T:Impart.Data.Letter.Types">
            <summary>All character types.</summary>
        </member>
        <member name="F:Impart.Data.Letter.Types.Any">
            <summary>Any character.</summary>
        </member>
        <member name="F:Impart.Data.Letter.Types.Special">
            <summary>Special character.</summary>
        </member>
        <member name="F:Impart.Data.Letter.Types.Number">
            <summary>Number character.</summary>
        </member>
        <member name="F:Impart.Data.Letter.Types.Alphabet">
            <summary>Alphabet character.</summary>
        </member>
        <member name="T:Impart.Data.Number">
            <summary>Randomly generate a number.</summary>
        </member>
        <member name="M:Impart.Data.Number.Range(System.Int64,System.Int64)">
            <summary>Generate a number in a specific range.</summary>
            <param name="min">The minimum number to generate.</param>
            <param name="max">The maximum number to generate.</param>
        </member>
        <member name="M:Impart.Data.Number.Length(System.Int32)">
            <summary>Generate a number with the specified length.</summary>
            <param name="length">The length of the number to generate.</param>
        </member>
        <member name="T:Impart.Data.Word">
            <summary>Randomly generate a word.</summary>
        </member>
        <member name="M:Impart.Data.Word.Length(System.Int32,Impart.Data.Letter.Types)">
            <summary>Generate a word with the specified length.</summary>
            <param name="length">The length of the word to generate.</param>
            <param name="type">The type of letters to include in the word. (Default is every letter.)</param>
        </member>
        <member name="T:Impart.Internal.DivisionScrollbar">
            <summary>Scrollbar for Division that Impart automatically generates when using a Scrollbar with a Division.</summary>
        </member>
        <member name="P:Impart.Internal.DivisionScrollbar.Impart#IStyleElement#ID">
            <summary>The ID value of the DivisionScrollbar. (always returns null)</summary>
        </member>
        <member name="P:Impart.Internal.DivisionScrollbar.Impart#IStyleElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Internal.DivisionScrollbar.#ctor(Impart.Scrollbar,System.String,System.Int32)">
            <summary>Creates a DivisionScrollbar instance.</summary>
            <param name="scrollbar">The Scrollbar to use.</param>
            <param name="id">The Division ID.</param>
            <param name=" ioid">The Scrollbar IOID.</param>
        </member>
        <member name="M:Impart.Internal.DivisionScrollbar.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Internal.ObjectExtensions">
            <summary>Extensions for Objects.</summary>
        </member>
        <member name="M:Impart.Internal.ObjectExtensions.IsNumber(System.Object)">
            <summary>Check if an Object is a number.</summary>
            <param name="o">The Object to check.</param>
        </member>
        <member name="T:Impart.Internal.IFormField">
            <summary>Form field interface.</summary>
        </member>
        <member name="T:Impart.Internal.INested">
            <summary>Elements that can be nested.</summary>
        </member>
        <member name="M:Impart.Internal.INested.First">
            <summary>The first tag of an Element with the contents.</summary>
        </member>
        <member name="M:Impart.Internal.INested.Last">
            <summary>The last tag of an Element.</summary>
        </member>
        <member name="T:Impart.Internal.Ioid">
            <summary>Impart Object ID.</summary>
        </member>
        <member name="M:Impart.Internal.Ioid.Generate">
            <summary>Generate and return a new IOID.</summary>
        </member>
        <member name="M:Impart.Internal.Ioid.GenerateOtherUnique">
            <summary>Generate and return a new IOID for multiple uses with a single instance.</summary>
        </member>
        <member name="T:Impart.Internal.ScriptingExtensions">
            <summary>Common methods used by multiple extensions in the Impart.Scripting namespace.</summary>
        </member>
        <member name="M:Impart.Internal.ScriptingExtensions.GetEdit(Impart.AttrType,System.Object[])">
            <summary>Get an event string finding elements by internally generated class.</summary>
            <param name="attrType">The AttrType that is changed in the event.</param>
            <param name="args">The Attr value(s) to assign to the AttrType in the event.</param>
        </member>
        <member name="M:Impart.Internal.ScriptingExtensions.GetEventName(Impart.Scripting.EventType)">
            <summary>Get the event name from the EventType.</summary>
            <param name="eventType">The EventType to get the name from.</param>
        </member>
        <member name="T:Impart.Scripting.ClickEventArgs">
            <summary>The event arguments passed when the user clicks.</summary>
        </member>
        <member name="F:Impart.Scripting.ClickEventArgs.click">
            <summary>The click type.</summary>
        </member>
        <member name="M:Impart.Scripting.ClickEventArgs.#ctor(Impart.Scripting.Click)">
            <summary>Create a ClickEventArgs instance.</summary>
            <returns>A ClickEventArgs instance.</returns>
            <param name="click">The click type.</param>
        </member>
        <member name="T:Impart.Scripting.KeyEventArgs">
            <summary>The event arguments passed when the user hits a key.</summary>
        </member>
        <member name="F:Impart.Scripting.KeyEventArgs.key">
            <summary>The key type.</summary>
        </member>
        <member name="M:Impart.Scripting.KeyEventArgs.#ctor(Impart.Scripting.Key)">
            <summary>Create a KeyEventArgs instance.</summary>
            <returns>A KeyEventArgs instance.</returns>
            <param name="key">The key type.</param>
        </member>
        <member name="T:Impart.Scripting.Element">
            <summary>Get events sorted by the element.</summary>
        </member>
        <member name="M:Impart.Scripting.Element.GetMany(Impart.Scripting.ElementType,Impart.AttrType,System.Object[])">
            <summary>Get muliple events.</summary>
            <param name="type">The ElementType of the elements to add the event.</param>
            <param name="attrType">The AttrType that is changed in the event.</param>
            <param name="args">The Attr value(s) to assign to the AttrType in the event.</param>
        </member>
        <member name="M:Impart.Scripting.Element.Get(Impart.Scripting.ElementType,Impart.AttrType,System.Object[])">
            <summary>Get an event.</summary>
            <param name="type">The ElementType of the element to add the event.</param>
            <param name="attrType">The AttrType that is changed in the event.</param>
            <param name="args">The Attr value(s) to assign to the AttrType in the event.</param>
        </member>
        <member name="T:Impart.Scripting.Browser">
            <summary>All browser types.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Chrome">
            <summary>Chrome browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Chromium">
            <summary>Chromium browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Opera">
            <summary>Opera browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Safari">
            <summary>Safari browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Firefox">
            <summary>Firefox browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.IE">
            <summary>IE browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Netscape">
            <summary>Netscape browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Edge">
            <summary>Edge browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Brave">
            <summary>Brave browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Vivaldi">
            <summary>Vivaldi browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Torch">
            <summary>Torch browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.Maxthon">
            <summary>Maxthon browser.</summary>
        </member>
        <member name="F:Impart.Scripting.Browser.NotBrand">
            <summary>Not a brand browser.</summary>
        </member>
        <member name="T:Impart.Scripting.Click">
            <summary>All click types.</summary>
        </member>
        <member name="F:Impart.Scripting.Click.Left">
            <summary>Left mouse click.</summary>
        </member>
        <member name="F:Impart.Scripting.Click.Right">
            <summary>Right mouse click.</summary>
        </member>
        <member name="F:Impart.Scripting.Click.Middle">
            <summary>Middle (scroll) mouse click.</summary>
        </member>
        <member name="T:Impart.Scripting.ElementType">
            <summary>All types of elements.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.RegularText">
            <summary>Regular Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.BoldText">
            <summary>Bold Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.DeleteText">
            <summary>Delete Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.EmphasizeText">
            <summary>Emphasize Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.ImportantText">
            <summary>Important Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.InsertText">
            <summary>Insert Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.ItalicText">
            <summary>Italic Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.MarkText">
            <summary>Mark Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.SmallText">
            <summary>Small Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.SubscriptText">
            <summary>Subscript Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.SuperscriptText">
            <summary>Superscript Text.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.OrderedList">
            <summary>Ordered List.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.UnorderedList">
            <summary>Unordered List.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Link">
            <summary>Link.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Image">
            <summary>Image.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Header1">
            <summary>Header 1.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Header2">
            <summary>Header 2.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Header3">
            <summary>Header 3.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Header4">
            <summary>Header 4.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Header5">
            <summary>Header 5.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.EFrame">
            <summary>EFrame.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Division">
            <summary>Division.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Button">
            <summary>Button.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Video">
            <summary>Video.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.TableRow">
            <summary>TableRow.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.TableHeader">
            <summary>TableHeader.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Table">
            <summary>Table.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.Form">
            <summary>Form.</summary>
        </member>
        <member name="F:Impart.Scripting.ElementType.FormInput">
            <summary>FormInput.</summary>
        </member>
        <member name="T:Impart.Scripting.Key">
            <summary>All key types.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.A">
            <summary>A key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.B">
            <summary>B key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.C">
            <summary>C key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.D">
            <summary>D key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.E">
            <summary>E key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F">
            <summary>F key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.G">
            <summary>G key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.H">
            <summary>H key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.I">
            <summary>I key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.J">
            <summary>J key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.K">
            <summary>K key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.L">
            <summary>L key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.M">
            <summary>M key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N">
            <summary>N key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.O">
            <summary>O key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.P">
            <summary>P key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Q">
            <summary>Q key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.R">
            <summary>R key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.S">
            <summary>S key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.T">
            <summary>T key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.U">
            <summary>U key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.V">
            <summary>V key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.W">
            <summary>W key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.X">
            <summary>X key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Y">
            <summary>Y key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Z">
            <summary>Z key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Tab">
            <summary>Tab key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Enter">
            <summary>Enter key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Shift">
            <summary>Shift key (either left or right).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Backspace">
            <summary>Backspace key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.CTRL">
            <summary>CTRL key (either left or right).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.ALT">
            <summary>ALT key (either left or right).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Escape">
            <summary>Escape key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Space">
            <summary>Space key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N1">
            <summary>Number 1 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N2">
            <summary>Number 2 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N3">
            <summary>Number 3 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N4">
            <summary>Number 4 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N5">
            <summary>Number 5 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N6">
            <summary>Number 6 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N7">
            <summary>Number 7 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N8">
            <summary>Number 8 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N9">
            <summary>Number 9 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.N0">
            <summary>Number 0 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F1">
            <summary>F1 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F2">
            <summary>F2 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F3">
            <summary>F3 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F4">
            <summary>F4 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F5">
            <summary>F5 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F6">
            <summary>F6 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F7">
            <summary>F7 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F8">
            <summary>F8 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F9">
            <summary>F9 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F10">
            <summary>F10 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F11">
            <summary>F11 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.F12">
            <summary>F12 key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.DEL">
            <summary>DEL key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.END">
            <summary>END key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.INS">
            <summary>INS key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.HOME">
            <summary>HOME key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.PRTSC">
            <summary>PRTSC key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.SCRLK">
            <summary>SCRLK key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.PAUSE">
            <summary>PAUSE key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.PGUP">
            <summary>PGUP key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.PGDN">
            <summary>PGDN key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.FN">
            <summary>FN key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.CapsLock">
            <summary>Caps lock key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.LeftSlash">
            <summary>Left slash key ( \ ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.RightSlash">
            <summary>Right slash key ( / ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.LeftBrace">
            <summary>Left brace key ( [ ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.RightBrace">
            <summary>Right brace key ( ] ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Minus">
            <summary>Minus key ( - ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Equals">
            <summary>Equals key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.Backtick">
            <summary>Backtick key ( ` ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.SingleQuote">
            <summary>Single quote key ( ' ).</summary>
        </member>
        <member name="F:Impart.Scripting.Key.SemiColon">
            <summary>Semicolon key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.UpArrow">
            <summary>Up arrow key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.DownArrow">
            <summary>Down arrow key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.LeftArrow">
            <summary>Left arrow key.</summary>
        </member>
        <member name="F:Impart.Scripting.Key.RightArrow">
            <summary>Right arrow key.</summary>
        </member>
        <member name="T:Impart.Scripting.Platform">
            <summary>All platform types.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.Windows">
            <summary>Windows operating system.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.Linux">
            <summary>Linux operating system.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.Mac">
            <summary>Mac operating system.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.Chrome">
            <summary>Chrome operating system.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.IOS">
            <summary>IOS operating system.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.Android">
            <summary>Android operating system.</summary>
        </member>
        <member name="F:Impart.Scripting.Platform.Unknown">
            <summary>Unknown operating system.</summary>
        </member>
        <member name="T:Impart.Scripting.Event">
            <summary>Stores an Event.</summary>
        </member>
        <member name="M:Impart.Scripting.Event.#ctor(Impart.Scripting.EventType,Impart.Scripting.IFunction)">
            <summary>Creates an Event instance.</summary>
            <param name="eventType">The EventType.</param>
            <param name="function">The IFunction to call when the Event is triggered.</param>
        </member>
        <member name="M:Impart.Scripting.Event.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Scripting.EventManager">
            <summary>Stores every Event for an IElement.</summary>
        </member>
        <member name="F:Impart.Scripting.EventManager.Events">
            <summary>A List of all currently registered Events for the IElement.</summary>
        </member>
        <member name="M:Impart.Scripting.EventManager.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Scripting.EventType">
            <summary>All of the Event triggers.</summary>
        </member>
        <member name="F:Impart.Scripting.EventType.Click">
            <summary>Triggers when clicked.</summary>
        </member>
        <member name="F:Impart.Scripting.EventType.DoubleClick">
            <summary>Triggers when double-clicked.</summary>
        </member>
        <member name="F:Impart.Scripting.EventType.Hover">
            <summary>Triggers when hovered over.</summary>
        </member>
        <member name="T:Impart.Scripting.TextExtensions">
            <summary>Extensions to the Text class for the purpose of adding events.</summary>
        </member>
        <member name="M:Impart.Scripting.TextExtensions.Set(Impart.Text,Impart.Scripting.EventType,Impart.Scripting.IFunction)">
            <summary>Set an event.</summary>
            <param name="text">The Text to add the event.</param>
            <param name="eventType">The EventType of the event.</param>
            <param name="function">The IFunction to call when the event is triggered.</param>
        </member>
        <member name="M:Impart.Scripting.TextExtensions.Get(Impart.Text,Impart.AttrType,System.Object[])">
            <summary>Get an event.</summary>
            <param name="text">The Text to get the event from.</param>
            <param name="attrType">The AttrType that is changed in the event.</param>
            <param name="args">The Attr value(s) to assign to the AttrType in the event.</param>
        </member>
        <member name="M:Impart.Scripting.TextExtensions.GetMany(Impart.Text,Impart.AttrType,System.Object[])">
            <summary>Get multiple events.</summary>
            <param name="text">The Text to get the events from.</param>
            <param name="attrType">The AttrType that is changed in the events.</param>
            <param name="args">The Attr value(s) to assign to the AttrType in the events.</param>
        </member>
        <member name="T:Impart.Scripting.WebPageScripting">
            <summary>Extensions to the WebPage class for client-side scripting.</summary>
        </member>
        <member name="M:Impart.Scripting.WebPageScripting.Set(Impart.WebPage,Impart.Scripting.EventType,Impart.Scripting.IFunction[])">
            <summary>Set an event.</summary>
            <param name="webPage">The WebPage to add the event.</param>
            <param name="eventType">The EventType of the event.</param>
            <param name="functions">The IFunction(s) to call when the event is triggered.</param>
        </member>
        <member name="M:Impart.Scripting.WebPageScripting.Get(Impart.WebPage,Impart.AttrType,System.Object[])">
            <summary>Get an event.</summary>
            <param name="webPage">The WebPage to get the event from.</param>
            <param name="attrType">The AttrType that is changed in the event.</param>
            <param name="args">The Attr value(s) to assign to the AttrType in the event.</param>
        </member>
        <member name="M:Impart.Scripting.WebPageScripting.Add(Impart.WebPage,Impart.Scripting.IFunction[])">
            <summary>Add an IFunction to the WebPage's Script.</summary>
            <param name="webPage">The WebPage to add the IFunction to its Script.</param>
            <param name="functions">The IFunction(s) to add to the WebPage's Script.</param>
        </member>
        <member name="M:Impart.Scripting.WebPageScripting.Remove(Impart.WebPage,Impart.Scripting.IFunction[])">
            <summary>Remove an IFunction from the WebPage's Script.</summary>
            <param name="webPage">The WebPage to remove the IFunction from its Script.</param>
            <param name="functions">The IFunction(s) to remove from the WebPage's Script.</param>
        </member>
        <member name="M:Impart.Scripting.WebPageScripting.Clear(Impart.WebPage)">
            <summary>Clear all IFunctions from the WebPage's Script.</summary>
            <param name="webPage">The WebPage to clear all IFunctions from its Script.</param>
        </member>
        <member name="T:Impart.Scripting.Edit">
            <summary>Stores an edit made to an IElement.</summary>
        </member>
        <member name="M:Impart.Scripting.Edit.#ctor(System.String)">
            <summary>Creates an Edit instance.</summary>
            <param name="render">The edit render to store.</param>
        </member>
        <member name="M:Impart.Scripting.Edit.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Scripting.IFunction">
            <summary>Interface for all Javascript function invocations.</summary>
        </member>
        <member name="T:Impart.Scripting.Invoke">
            <summary>Stores a function invocation.</summary>
        </member>
        <member name="M:Impart.Scripting.Invoke.#ctor(System.String)">
            <summary>Creates an Invoke instance.</summary>
            <param name="render">The invocation render to store.</param>
        </member>
        <member name="M:Impart.Scripting.Invoke.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Scripting.DevTools">
            <summary>Interact with developer tools such as the console.</summary>
        </member>
        <member name="M:Impart.Scripting.DevTools.WriteLine(System.Object)">
            <summary>Writes the specified Object to the console and terminates the line.</summary>
            <param name="obj">The Object to write to the console.</param>
        </member>
        <member name="M:Impart.Scripting.DevTools.Warn(System.Object)">
            <summary>Sends the console a warning.</summary>
            <param name="obj">The Object to use as the warning message.</param>
        </member>
        <member name="M:Impart.Scripting.DevTools.TimeStart(System.Object)">
            <summary>Begins a timer.</summary>
            <param name="obj">The Object to use as the timer name.</param>
        </member>
        <member name="M:Impart.Scripting.DevTools.TimeEnd(System.Object)">
            <summary>Ends a timer identified by the timer name.</summary>
            <param name="obj">The Object to use as the timer name.</param>
        </member>
        <member name="M:Impart.Scripting.DevTools.WriteTime(System.Object)">
            <summary>Writes a timer's current elapsed time, identified by the timer name.</summary>
            <param name="obj">The Object to use as the timer name.</param>
        </member>
        <member name="M:Impart.Scripting.DevTools.Group(System.Object,Impart.Scripting.Invoke[])">
            <summary>Groups a series of Invokes together under a specified name.</summary>
            <param name="obj">The Object to use as the group name.</param>
            <param name="invokes">The Invokes to group together.</param>
        </member>
        <member name="M:Impart.Scripting.DevTools.Clear">
            <summary>Clears the console.</summary>
        </member>
        <member name="M:Impart.Scripting.DevTools.Alert(System.Object)">
            <summary>Triggers a popup alert with a message.</summary>
            <param name="obj">The Object to use as the alert message.</param>
        </member>
        <member name="T:Impart.Scripting.Script">
            <summary>A collection of IFunctions, all called when the WebPage first loads.</summary>
        </member>
        <member name="F:Impart.Scripting.Script.Functions">
            <summary>All of the IFunctions currently registered in the Script.</summary>
        </member>
        <member name="M:Impart.Scripting.Script.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Attr">
            <summary>An element attribute.</summary>
        </member>
        <member name="P:Impart.Attr.Type">
            <summary>The AttrType.</summary>
        </member>
        <member name="P:Impart.Attr.Value">
            <summary>The Attr value(s).</summary>
        </member>
        <member name="M:Impart.Attr.#ctor(Impart.AttrType,System.Object[])">
            <summary>Creates an Attr instance.</summary>
            <param name="type">The AttrType.</param>
            <param name="value">The Attr value(s).</param>
        </member>
        <member name="M:Impart.Attr.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.AttrList">
            <summary>Store a list of Attrs.</summary>
        </member>
        <member name="M:Impart.AttrList.#ctor">
            <summary>Creates an AttrList instance.</summary>
        </member>
        <member name="P:Impart.AttrList.Item(Impart.AttrType)">
            <summary>Return an Attr from the AttrList based on the AttrType.</summary>
        </member>
        <member name="M:Impart.AttrList.Add(Impart.Attr)">
            <summary>Add an Attr to the AttrList.</summary>
            <param name="attribute">The Attr to add.</param>
        </member>
        <member name="M:Impart.AttrList.Add(Impart.AttrType,System.Object[])">
            <summary>Add an Attr to the AttrList.</summary>
            <param name="type">The AttrType to add.</param>
            <param name="args">The Attr value(s).</param>
        </member>
        <member name="M:Impart.AttrList.Clear">
            <summary>Remove all Attrs from the AttrList.</summary>
        </member>
        <member name="M:Impart.AttrList.AddRange(System.Collections.Generic.IEnumerable{Impart.Attr})">
            <summary>Add multiple Attrs to the AttrList.</summary>
            <param name="attributes">The Attrs to add.</param>
        </member>
        <member name="M:Impart.AttrList.Insert(System.Int32,Impart.Attr)">
            <summary>Add an Attr to the AttrList at the specified index.</summary>
            <param name="index">The index to add the Attr at.</param>
            <param name="attribute">The Attr to add.</param>
        </member>
        <member name="M:Impart.AttrList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Impart.Attr})">
            <summary>Add multiple Attrs to the AttrList at the specified index.</summary>
            <param name="index">The index to add the Attrs at.</param>
            <param name="attributes">The Attrs to add.</param>
        </member>
        <member name="M:Impart.AttrList.Remove(Impart.Attr)">
            <summary>Remove an Attr from the AttrList.</summary>
            <param name="attribute">The Attr to remove.</param>
        </member>
        <member name="M:Impart.AttrList.RemoveAll(System.Predicate{Impart.Attr})">
            <summary>Remove all Attrs that meet specific conditions from the AttrList.</summary>
            <param name="conditions">The Attr conditions.</param>
        </member>
        <member name="M:Impart.AttrList.RemoveAt(System.Int32)">
            <summary>Remove an Attr from the AttrList at the specified index.</summary>
            <param name="index">The index to remove the Attr at.</param>
        </member>
        <member name="M:Impart.AttrList.RemoveRange(System.Int32,System.Int32)">
            <summary>Remove multiple Attrs from the AttrList at the specified index.</summary>
            <param name="index">The index to remove the Attrs at.</param>
            <param name="count">The number of Attrs to remove after the index.</param>
        </member>
        <member name="T:Impart.AttrType">
            <summary>All the Attribute types.</summary>
        </member>
        <member name="F:Impart.AttrType.BackgroundColor">
            <summary>Background color attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.ForegroundColor">
            <summary>Foreground color attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Alignment">
            <summary>Alignment attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.FontFamily">
            <summary>Font family attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.FontSize">
            <summary>Font size attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Margin">
            <summary>Margin attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Padding">
            <summary>Padding attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Width">
            <summary>Width attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Height">
            <summary>Height attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Border">
            <summary>Border attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.OverflowX">
            <summary>X-axis scrollbar overflow attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.OverflowY">
            <summary>Y-axis scrollbar overflow attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.AlignText">
            <summary>Text alignment attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Animation">
            <summary>Animation attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Background">
            <summary>Background attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.CustomFont">
            <summary>Custom font attribute.</summary>
        </member>
        <member name="F:Impart.AttrType.Empty">
            <summary>Represents an empty Attr. No actual attribute is recognised with this value, so do not use.</summary>
        </member>
        <member name="T:Impart.ExtAttr">
            <summary>An element external attribute.</summary>
        </member>
        <member name="F:Impart.ExtAttr.Type">
            <summary>The ExtAttrType.</summary>
        </member>
        <member name="F:Impart.ExtAttr.Value">
            <summary>The ExtAttr value.</summary>
        </member>
        <member name="M:Impart.ExtAttr.#ctor(Impart.ExtAttrType,System.String)">
            <summary>Creates an ExtAttr instance.</summary>
            <param name="type">The ExtAttrType.</param>
            <param name="value">The ExtAttr value.</param>
        </member>
        <member name="M:Impart.ExtAttr.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.ExtAttrList">
            <summary>Store a list of ExtAttrs.</summary>
        </member>
        <member name="M:Impart.ExtAttrList.#ctor">
            <summary>Creates an ExtAttrList instance.</summary>
        </member>
        <member name="P:Impart.ExtAttrList.Item(Impart.ExtAttrType)">
            <summary>Return an ExtAttr from the ExtAttrList based on the ExtAttrType.</summary>
        </member>
        <member name="M:Impart.ExtAttrList.Add(Impart.ExtAttr)">
            <summary>Add an ExtAttr to the ExtAttrList.</summary>
            <param name="attribute">The ExtAttr to add.</param>
        </member>
        <member name="M:Impart.ExtAttrList.Add(Impart.ExtAttrType,System.String)">
            <summary>Add an ExtAttr to the ExtAttrList.</summary>
            <param name="type">The ExtAttrType to add.</param>
            <param name="value">The ExtAttr value.</param>
        </member>
        <member name="M:Impart.ExtAttrList.Clear">
            <summary>Remove all ExtAttrs from the ExtAttrList.</summary>
        </member>
        <member name="M:Impart.ExtAttrList.AddRange(System.Collections.Generic.IEnumerable{Impart.ExtAttr})">
            <summary>Add multiple ExtAttrs to the ExtAttrList.</summary>
            <param name="attributes">The ExtAttrs to add.</param>
        </member>
        <member name="M:Impart.ExtAttrList.Insert(System.Int32,Impart.ExtAttr)">
            <summary>Add an ExtAttr to the ExtAttrList at the specified index.</summary>
            <param name="index">The index to add the ExtAttr at.</param>
            <param name="attribute">The ExtAttr to add.</param>
        </member>
        <member name="M:Impart.ExtAttrList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Impart.ExtAttr})">
            <summary>Add multiple ExtAttrs to the ExtAttrList at the specified index.</summary>
            <param name="index">The index to add the ExtAttrs at.</param>
            <param name="attributes">The ExtAttrs to add.</param>
        </member>
        <member name="M:Impart.ExtAttrList.Remove(Impart.ExtAttr)">
            <summary>Remove an ExtAttr from the ExtAttrList.</summary>
            <param name="attribute">The ExtAttr to remove.</param>
        </member>
        <member name="M:Impart.ExtAttrList.RemoveAll(System.Predicate{Impart.ExtAttr})">
            <summary>Remove all ExtAttrs that meet specific conditions from the ExtAttrList.</summary>
            <param name="conditions">The ExtAttr conditions.</param>
        </member>
        <member name="M:Impart.ExtAttrList.RemoveAt(System.Int32)">
            <summary>Remove an ExtAttr from the ExtAttrList at the specified index.</summary>
            <param name="index">The index to remove the ExtAttr at.</param>
        </member>
        <member name="M:Impart.ExtAttrList.RemoveRange(System.Int32,System.Int32)">
            <summary>Remove multiple ExtAttrs from the ExtAttrList at the specified index.</summary>
            <param name="index">The index to remove the ExtAttrs at.</param>
            <param name="count">The number of ExtAttrs to remove after the index.</param>
        </member>
        <member name="T:Impart.ExtAttrType">
            <summary>All the ExtAttr types.</summary>
        </member>
        <member name="F:Impart.ExtAttrType.ID">
            <summary>ID external attribute.</summary>
        </member>
        <member name="F:Impart.ExtAttrType.HoverMessage">
            <summary>Hover message external attribute.</summary>
        </member>
        <member name="T:Impart.ImpartError">
            <summary>The main error class used by Impart.</summary>
        </member>
        <member name="M:Impart.ImpartError.#ctor(System.String)">
            <summary>Throws an ImpartError.</summary>
            <param name="error">The error message.</param>
        </member>
        <member name="T:Impart.Log">
            <summary>Store a log.</summary>
        </member>
        <member name="F:Impart.Log.Milliseconds">
            <summary>The duration of the log.</summary>
        </member>
        <member name="F:Impart.Log.Message">
            <summary>The Log message.</summary>
        </member>
        <member name="M:Impart.Log.#ctor(System.String,System.Double)">
            <summary>Creates a Log instance.</summary>
            <param name="message">The Log message</param>
            <param name="milliseconds">The duration of the action in milliseconds.</param>
        </member>
        <member name="T:Impart.Logger">
            <summary>Log messages/warnings to the console.</summary>
        </member>
        <member name="M:Impart.Logger.Info(System.String)">
            <summary>
                Log a message to the console. This method will rarely be called by Impart automatically unless you add the following to your .csproj file:
                <code>{ DefineConstants } LOGGING { /DefineConstants }</code>
            </summary>
            <param name="log">The message to log.</param>
        </member>
        <member name="M:Impart.Logger.Warning(System.String)">
            <summary>Log a warning to the console. Impart will automatically call this method when something of mild concern happens.</summary>
            <param name="warning">The warning to log.</param>
        </member>
        <member name="M:Impart.Logger.CriticalWarning(System.String)">
            <summary>Log a critical warning to the console. Impart will automatically call this method when something severely bad happens.</summary>
            <param name="warning">The critical warning to log.</param>
        </member>
        <member name="T:Impart.Timer">
            <summary>Track a difference in time.</summary>
        </member>
        <member name="E:Impart.Timer.Event">
            <summary>Called when the timer is stopped.</summary>
        </member>
        <member name="M:Impart.Timer.Start">
            <summary>Start tracking time.</summary>
        </member>
        <member name="M:Impart.Timer.Pause">
            <summary>Temporarily pause tracking time.</summary>
        </member>
        <member name="M:Impart.Timer.Resume">
            <summary>Resume tracking time.</summary>
        </member>
        <member name="M:Impart.Timer.Log(System.String)">
            <summary>Call the log event with a log message.</summary>
            <param name="message">The log message.</param>
        </member>
        <member name="T:Impart.Button">
            <summary>Button element.</summary>
        </member>
        <member name="P:Impart.Button.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.Button.Text">
            <summary>The Text value of the Button.</summary>
        </member>
        <member name="P:Impart.Button.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Button.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Button.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Button.#ctor">
            <summary>Creates an empty Button instance.</summary>
        </member>
        <member name="M:Impart.Button.#ctor(Impart.Text)">
            <summary>Creates a Button instance.</summary>
            <param name="text">The Button text.</param>
        </member>
        <member name="M:Impart.Button.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Button.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Button.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Button.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Button.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Button.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Button.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.Division">
            <summary>Division element.</summary>
        </member>
        <member name="P:Impart.Division.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.Division.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Division.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Division.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Division.#ctor">
            <summary>Creates a Division instance.</summary>
        </member>
        <member name="M:Impart.Division.AddText(Impart.Text)">
            <summary>Add a Text to the Division.</summary>
            <param name="text">The Text instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddImage(Impart.Image)">
            <summary>Add a Image to the Division.</summary>
            <param name="image">The Image instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddHeader(Impart.Header)">
            <summary>Add a Header to the Division.</summary>
            <param name="header">The Header instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddLink(Impart.Link)">
            <summary>Add a Link to the Division.</summary>
            <param name="link">The Link instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddTable(Impart.Table)">
            <summary>Add a Table to the Division.</summary>
            <param name="table">The Table instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddDivision(Impart.Division)">
            <summary>Add a Division to the Division.</summary>
            <param name="division">The Division instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddForm(Impart.Form)">
            <summary>Add a Form to the Division.</summary>
            <param name="form">The Form instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddButton(Impart.Button)">
            <summary>Add a Button to the Division.</summary>
            <param name="button">The Button instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddNest(Impart.Nest)">
            <summary>Add a Nest to the Division.</summary>
            <param name="nest">The Nest instance to add.</param>
        </member>
        <member name="M:Impart.Division.AddVideo(Impart.Video)">
            <summary>Add a Video to the Division.</summary>
            <param name="video">The Video instance to add.</param>
        </member>
        <member name="M:Impart.Division.SetStyle(Impart.Style)">
            <summary>Sets a Style to the Division.</summary>
            <param name="style">The Style instance to use.</param>
        </member>
        <member name="M:Impart.Division.SetScrollbar(Impart.Scrollbar)">
            <summary>Sets a Scrollbar to the Division.</summary>
            <param name="scrollbar">The scrollbar to add.</param>
        </member>
        <member name="M:Impart.Division.Dispose">
            <summary>Dispose of the Division instance.</summary>
        </member>
        <member name="M:Impart.Division.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Division.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Division.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Division.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Division.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Division.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Division.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.EFrame">
            <summary>Embed a page into your website in the form of a frame.</summary>
        </member>
        <member name="P:Impart.EFrame.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.EFrame.Width">
            <summary>The width (in pixels).</summary>
        </member>
        <member name="F:Impart.EFrame.Height">
            <summary>The height (in pixels).</summary>
        </member>
        <member name="F:Impart.EFrame.Source">
            <summary>The source link of the page to embed.</summary>
        </member>
        <member name="P:Impart.EFrame.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.EFrame.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.EFrame.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.EFrame.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Creates an EFrame instance.</summary>
            <param name="width">The width (in pixels).</param>
            <param name="height">The height (in pixels).</param>
            <param name="source">The source link of the page to embed.</param>
        </member>
        <member name="M:Impart.EFrame.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.EFrame.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.EFrame.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.EFrame.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.EFrame.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.EFrame.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.EFrame.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.ElementRef">
            <summary> Hold a reference to an IElement.</summary>
        </member>
        <member name="M:Impart.ElementRef.#ctor(Impart.IElement)">
            <summary>Creates an ElementRef instance.</summary>
            <param name="element">The IElement instance to create the reference to.</param>
        </member>
        <member name="M:Impart.ElementRef.op_Equality(Impart.IElement,Impart.ElementRef)">
            <summary>Compares the equality of an IElement instance and an ElementRef instance.</summary>
            <param name="element">The IElement instance to compare.</param>
            <param name="reference">The ElementRef instance to compare.</param>
        </member>
        <member name="M:Impart.ElementRef.op_Inequality(Impart.IElement,Impart.ElementRef)">
            <summary>Compares the inequality of an IElement instance and an ElementRef instance.</summary>
            <param name="element">The IElement instance to compare.</param>
            <param name="reference">The ElementRef instance to compare.</param>
        </member>
        <member name="M:Impart.ElementRef.Equals(System.Object)">
            <summary>Compares the equality of an Object instance and this instance.</summary>
            <param name="obj">The Object instance to compare.</param>
        </member>
        <member name="M:Impart.ElementRef.GetHashCode">
            <summary>Get the hash code of this instance.</summary>
        </member>
        <member name="T:Impart.Form">
            <summary>Form element.</summary>
        </member>
        <member name="P:Impart.Form.ID">
            <summary>The ID value of the IElement. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.Form.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Form.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Form.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Form.#ctor">
            <summary>Creates a Form instance.</summary>
        </member>
        <member name="M:Impart.Form.AddTextField(Impart.TextField[])">
            <summary>Add <paramref name="textFields"/> to the Form.</summary>
            <param name="textFields">The TextField array to add.</param>
        </member>
        <member name="M:Impart.Form.AddCheckField(Impart.CheckField[])">
            <summary>Add <paramref name="checkFields"/> to the Form.</summary>
            <param name="checkFields">The CheckField array to add.</param>
        </member>
        <member name="M:Impart.Form.AddSubmitField(Impart.SubmitField)">
            <summary>Add <paramref name="submitField"/> to the Form.</summary>
            <param name="submitField">The SubmitField to add.</param>
        </member>
        <member name="M:Impart.Form.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Form.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Form.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Form.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Form.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Form.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Form.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.CheckField">
            <summary>Checkbox input for Form.</summary>
        </member>
        <member name="P:Impart.CheckField.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.CheckField.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="F:Impart.CheckField.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="M:Impart.CheckField.#ctor(System.String)">
            <summary>Creates a CheckField instance.</summary>
            <param name="text">The CheckField text.</param>
        </member>
        <member name="M:Impart.CheckField.#ctor(Impart.Text,System.String)">
            <summary>Creates a CheckField instance.</summary>
            <param name="text">The CheckField text.</param>
            <param name="id">The CheckField style ID.</param>
        </member>
        <member name="M:Impart.CheckField.ToString">
            <summary>Returns the instance as a String.</summary>
            <returns>A String instance.</returns>
        </member>
        <member name="T:Impart.SubmitField">
            <summary>Submit button for Form.</summary>
        </member>
        <member name="P:Impart.SubmitField.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.SubmitField.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="F:Impart.SubmitField.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="M:Impart.SubmitField.#ctor">
            <summary>Creates a SubmitField instance.</summary>
        </member>
        <member name="M:Impart.SubmitField.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.TextField">
            <summary>Text field for Form.</summary>
        </member>
        <member name="P:Impart.TextField.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.TextField.Text">
            <summary>The Text value of the instance.</summary>
        </member>
        <member name="F:Impart.TextField.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="F:Impart.TextField.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="M:Impart.TextField.#ctor(System.String)">
            <summary>Creates a TextField instance.</summary>
            <param name="text">The TextField text.</param>
        </member>
        <member name="M:Impart.TextField.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Header">
            <summary>Header element.</summary>
        </member>
        <member name="P:Impart.Header.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.Header.TextValue">
            <summary>The text value of the Header.</summary>
        </member>
        <member name="P:Impart.Header.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Header.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Header.Number">
            <summary>The Header number value of the Header.</summary>
        </member>
        <member name="P:Impart.Header.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Header.#ctor">
            <summary>Creates an empty Header instance.</summary>
        </member>
        <member name="M:Impart.Header.#ctor(System.String,System.Int32)">
            <summary>Creates a Header instance.</summary>
            <param name="text">The Header text.</param>
            <param name="number">The Header type.</param>
        </member>
        <member name="M:Impart.Header.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Header.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Header.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Header.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Header.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Header.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Header.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.Image">
            <summary>Image element.</summary>
        </member>
        <member name="P:Impart.Image.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.Image.Source">
            <summary>The source link of the Image.</summary>
        </member>
        <member name="P:Impart.Image.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Image.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Image.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Image.#ctor">
            <summary>Creates an empty Image instance.</summary>
        </member>
        <member name="M:Impart.Image.#ctor(System.String)">
            <summary>Creates an Image instance.</summary>
            <param name="path">The Image path.</param>
        </member>
        <member name="M:Impart.Image.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Image.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Image.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Image.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Image.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Image.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Image.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.Link">
            <summary>Link element.</summary>
        </member>
        <member name="P:Impart.Link.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.Link.Text">
            <summary>The Text value of the Link.</summary>
        </member>
        <member name="F:Impart.Link.Image">
            <summary>The Image value of the Link.</summary>
        </member>
        <member name="F:Impart.Link.Path">
            <summary>The path value of the Link.</summary>
        </member>
        <member name="P:Impart.Link.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Link.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Link.LinkType">
            <summary>The Type of Link.</summary>
        </member>
        <member name="P:Impart.Link.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Link.#ctor">
            <summary>Creates an empty Link instance.</summary>
        </member>
        <member name="M:Impart.Link.#ctor(Impart.Text,System.String)">
            <summary>Creates a Link instance.</summary>
            <param name="text">The Link text.</param>
            <param name="path">The Link path.</param>
        </member>
        <member name="M:Impart.Link.#ctor(Impart.Image,System.String)">
            <summary>Creates a Link instance.</summary>
            <param name="image">The Link image.</param>
            <param name="path">The Link path.</param>
        </member>
        <member name="M:Impart.Link.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Link.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Link.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Link.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Link.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Link.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Link.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.EList`1">
            <summary>Store a list of IElements.</summary>
        </member>
        <member name="P:Impart.EList`1.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.EList`1.Entries">
            <summary>The entry values of the EList.</summary>
        </member>
        <member name="P:Impart.EList`1.Type">
            <summary>The EListType value of the EList.</summary>
        </member>
        <member name="P:Impart.EList`1.GetEntryType">
            <summary>The EList entry type.</summary>
        </member>
        <member name="P:Impart.EList`1.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.EList`1.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.EList`1.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.EList`1.#ctor(Impart.EListType,`0[])">
            <summary>Creates an EList instance.</summary>
            <param name="type">The EList type.</param>
            <param name="entries">The EList entries.</param>
        </member>
        <member name="M:Impart.EList`1.Add(`0[])">
            <summary>Add entries to the EList.</summary>
            <param name="entries">The entry to add.</param>
        </member>
        <member name="M:Impart.EList`1.Remove(`0[])">
            <summary>Remove entries from the EList.</summary>
            <param name="entries">The entries to remove.</param>
        </member>
        <member name="M:Impart.EList`1.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.EList`1.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.EList`1.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.EList`1.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.EList`1.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.EList`1.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.EList`1.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.Nest">
            <summary>A nest of IElements.</summary>
        </member>
        <member name="P:Impart.Nest.IElement">
            <summary>All of the IElements included in the Nest.</summary>
        </member>
        <member name="P:Impart.Nest.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="P:Impart.Nest.ExtAttrs">
            <summary>The ExtAttr values of the instance (will always return null, as this is a group of IElements).</summary>
        </member>
        <member name="P:Impart.Nest.Attrs">
            <summary>The Attr values of the instance (will always return null, as this is a group of IElements).</summary>
        </member>
        <member name="M:Impart.Nest.#ctor">
            <summary>Creates an empty Nest instance.</summary>
        </member>
        <member name="M:Impart.Nest.#ctor(Impart.IElement[])">
            <summary>Creates a Nest instance.</summary>
            <param name="elements">The IElements to add to the Nest.</param>
        </member>
        <member name="M:Impart.Nest.Add(Impart.IElement[])">
            <summary>Adds IElement(s) to the Nest.</summary>
            <param name="elements">The IElements to add to the Nest.</param>
        </member>
        <member name="M:Impart.Nest.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Nest.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Nest.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Nest.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Nest.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="T:Impart.Animation">
            <summary>Animation style element.</summary>
        </member>
        <member name="P:Impart.Animation.Frames">
            <summary>A list of Frames included in the Animation.</summary>
        </member>
        <member name="P:Impart.Animation.Impart#IStyleElement#ID">
            <summary>The ID value of the Animation. (acts as the name of the Animation)</summary>
        </member>
        <member name="P:Impart.Animation.Impart#IStyleElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Animation.#ctor(System.String)">
            <summary>Creates an Animation instance.</summary>
            <param name="name">The name of the Animation.</param>
        </member>
        <member name="M:Impart.Animation.AddFrame(Impart.Frame[])">
            <summary>Add a Frame to the Animation.</summary>
            <param name="frames">The Frame(s) to add.</param>
        </member>
        <member name="M:Impart.Animation.AddFrame(Impart.Percent,Impart.ChangeType,System.Object)">
            <summary>Add a Frame to the Animation.</summary>
            <param name="position">The position of the Frame to add.</param>
            <param name="changeType">The ChangeType of the Frame to add.</param>
            <param name="change">The change of the Frame to add.</param>
        </member>
        <member name="M:Impart.Animation.RemoveFrame(Impart.Percent)">
            <summary>Remove a Frame from the Animation.</summary>
            <param name="position">The position of the Frame to remove.</param>
        </member>
        <member name="M:Impart.Animation.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.AnimationArgs">
            <summary>The arguments for calling an Animation.</summary>
        </member>
        <member name="F:Impart.AnimationArgs.Name">
            <summary>The Animation name.</summary>
        </member>
        <member name="F:Impart.AnimationArgs.Duration">
            <summary>The Animation duration.</summary>
        </member>
        <member name="F:Impart.AnimationArgs.Delay">
            <summary>The Animation delay.</summary>
        </member>
        <member name="F:Impart.AnimationArgs.Count">
            <summary>The number of times to repeat the Animation.</summary>
        </member>
        <member name="M:Impart.AnimationArgs.#ctor(System.String,Impart.Time)">
            <summary>Creates an AnimationArgs instance.</summary>
            <param name="name">The Animation name.</param>
            <param name="duration">The Animation duration.</param>
        </member>
        <member name="M:Impart.AnimationArgs.#ctor(System.String,Impart.Time,Impart.Time)">
            <summary>Creates an AnimationArgs instance.</summary>
            <param name="name">The Animation name.</param>
            <param name="duration">The Animation duration.</param>
            <param name="delay">The Animation delay.</param>
        </member>
        <member name="M:Impart.AnimationArgs.#ctor(System.String,Impart.Time,Impart.Time,System.Int32)">
            <summary>Creates an AnimationArgs instance.</summary>
            <param name="name">The Animation name.</param>
            <param name="duration">The Animation duration.</param>
            <param name="delay">The Animation delay.</param>
            <param name="count">The number of times to repeat the Animation.</param>
        </member>
        <member name="M:Impart.AnimationArgs.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.ChangeType">
            <summary>All types of changes in the Animation.</summary>
        </member>
        <member name="F:Impart.ChangeType.BackgroundColor">
            <summary>Background color change.</summary>
        </member>
        <member name="F:Impart.ChangeType.ForegroundColor">
            <summary>Foreground color change.</summary>
        </member>
        <member name="F:Impart.ChangeType.Width">
            <summary>Width change.</summary>
        </member>
        <member name="F:Impart.ChangeType.Height">
            <summary>Height change.</summary>
        </member>
        <member name="F:Impart.ChangeType.Position">
            <summary>Position change.</summary>
        </member>
        <member name="F:Impart.ChangeType.Size">
            <summary>Size change.</summary>
        </member>
        <member name="T:Impart.Frame">
            <summary>The class for a single Frame in an Animation.</summary>
        </member>
        <member name="F:Impart.Frame.Position">
            <summary>The position of the Frame.</summary>
        </member>
        <member name="F:Impart.Frame.ChangeType">
            <summary>The type of Change.</summary>
        </member>
        <member name="F:Impart.Frame.Change">
            <summary>The change to take place in the Frame.</summary>
        </member>
        <member name="M:Impart.Frame.#ctor(Impart.Percent,Impart.ChangeType,System.Object)">
            <summary>Creates a Frame instance.</summary>
            <param name="position">The position value.</param>
            <param name="changeType">The type of Change.</param>
            <param name="change">The change to take place.</param>
        </member>
        <member name="M:Impart.Frame.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Background">
            <summary>All types of background image options.</summary>
        </member>
        <member name="F:Impart.Background.Loop">
            <summary>Loop the background image repeatedly.</summary>
        </member>
        <member name="F:Impart.Background.Single">
            <summary>Display a single background image at original resolution.</summary>
        </member>
        <member name="F:Impart.Background.Stretch">
            <summary>Display a single background image stretched to fill the whole background.</summary>
        </member>
        <member name="T:Impart.BackgroundArgs">
            <summary>Arguments for setting the background image.</summary>
        </member>
        <member name="F:Impart.BackgroundArgs.Image">
            <summary>The background image.</summary>
        </member>
        <member name="F:Impart.BackgroundArgs.Background">
            <summary>The background image options.</summary>
        </member>
        <member name="M:Impart.BackgroundArgs.#ctor(System.String,Impart.Background)">
            <summary>Creates a BackgroundArgs instance.</summary>
            <param name="image">The background image.</param>
            <param name="background">The background image options.</param>
        </member>
        <member name="T:Impart.BorderArgs">
            <summary>Arguments for setting the border.</summary>
        </member>
        <member name="F:Impart.BorderArgs.Type">
            <summary>The border line type.</summary>
        </member>
        <member name="F:Impart.BorderArgs.Width">
            <summary>The border line width.</summary>
        </member>
        <member name="F:Impart.BorderArgs.Color">
            <summary>The border color.</summary>
        </member>
        <member name="M:Impart.BorderArgs.#ctor(Impart.BorderType,Impart.Length,Impart.Color)">
            <summary>Creates a BorderArgs instance</summary>
            <param name="type">The border type.</param>
            <param name="width">The border line width.</param>
            <param name="color">The border color.</param>
        </member>
        <member name="T:Impart.BorderType">
            <summary>All border line types.</summary>
        </member>
        <member name="F:Impart.BorderType.Normal">
            <summary>Normal border (solid line).</summary>
        </member>
        <member name="F:Impart.BorderType.Dashed">
            <summary>Dashed border.</summary>
        </member>
        <member name="F:Impart.BorderType.Dotted">
            <summary>Dotted border.</summary>
        </member>
        <member name="F:Impart.BorderType.Double">
            <summary>Double border.</summary>
        </member>
        <member name="F:Impart.BorderType.In3D">
            <summary>Inward 3D border.</summary>
        </member>
        <member name="F:Impart.BorderType.Out3D">
            <summary>Outward 3D border.</summary>
        </member>
        <member name="T:Impart.Scrollbar">
            <summary>Scrollbar style element.</summary>
        </member>
        <member name="P:Impart.Scrollbar.Impart#IStyleElement#ID">
            <summary>The ID value of the Scrollbar. (always returns null)</summary>
        </member>
        <member name="P:Impart.Scrollbar.Impart#IStyleElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Scrollbar.#ctor(Impart.Axis,Impart.Length,Impart.Color,Impart.Color,Impart.Length)">
            <summary>Creates a Scrollbar instance.</summary>
            <param name="axis">The axis of the scrollbar.</param>
            <param name="width">The width of the scrollbar.</param>
            <param name="backgroundColor">The background color of the scrollbar.</param>
            <param name="foregroundColor">The foreground color of the scrollbar.</param>
            <param name="radius">The radius of the top and bottom of the scrollbar thumb, if rounded.</param>
        </member>
        <member name="M:Impart.Scrollbar.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Table">
            <summary>Table element.</summary>
        </member>
        <member name="P:Impart.Table.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.Table.Rows">
            <summary>The TableRow values of the instance.</summary>
        </member>
        <member name="P:Impart.Table.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Table.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Table.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Table.#ctor(Impart.TableRow[])">
            <summary>Creates a Table instance.</summary>
            <param name="rows">The TableRows to add.</param>
        </member>
        <member name="M:Impart.Table.AddRow(Impart.TableRow[])">
            <summary>Add TableRows to the Table.</summary>
            <param name="rows">The TableRows to add.</param>
        </member>
        <member name="M:Impart.Table.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Table.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Table.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Table.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Table.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Table.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Table.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.TableHeader">
            <summary>A header row of a Table.</summary>
        </member>
        <member name="P:Impart.TableHeader.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.TableHeader.Elements">
            <summary>The IElement values of the instance.</summary>
        </member>
        <member name="F:Impart.TableHeader.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="F:Impart.TableHeader.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="M:Impart.TableHeader.#ctor(Impart.IElement[])">
            <summary>Creates a TableHeader instance.</summary>
            <param name="elements">The IElements to add.</param>
        </member>
        <member name="M:Impart.TableHeader.AddRow(Impart.IElement[])">
            <summary>Add IElements to the TableHeader.</summary>
            <param name="elements">The IElements to add.</param>
        </member>
        <member name="M:Impart.TableHeader.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.TableRow">
            <summary>A row of a Table.</summary>
        </member>
        <member name="P:Impart.TableRow.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="P:Impart.TableRow.Elements">
            <summary>The IElements values of the instance.</summary>
        </member>
        <member name="F:Impart.TableRow.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="F:Impart.TableRow.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="M:Impart.TableRow.#ctor(Impart.IElement[])">
            <summary>Creates a TableRow instance.</summary>
            <param name="elements">The IElements to add.</param>
        </member>
        <member name="M:Impart.TableRow.AddRow(Impart.IElement[])">
            <summary>Add IElements to the TableRow.</summary>
            <param name="elements">The IElements to add.</param>
        </member>
        <member name="M:Impart.TableRow.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.Text">
            <summary>Text element.</summary>
        </member>
        <member name="P:Impart.Text.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.Text.TextValue">
            <summary>The text value of the Text.</summary>
        </member>
        <member name="F:Impart.Text.Type">
            <summary>The TextType value of the Text.</summary>
        </member>
        <member name="P:Impart.Text.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Text.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Text.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Text.#ctor">
            <summary>Creates an empty Text instance.</summary>
        </member>
        <member name="M:Impart.Text.#ctor(System.String)">
            <summary>Creates a Text instance.</summary>
            <param name="text">The Text text.</param>
        </member>
        <member name="M:Impart.Text.#ctor(System.String,Impart.TextType)">
            <summary>Creates a Text instance.</summary>
            <param name="text">The Text text.</param>
            <param name="type">The Text type.</param>
        </member>
        <member name="M:Impart.Text.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Text.op_Implicit(System.String)~Impart.Text">
            <summary>Convert the String instance to a Text.</summary>
            <param name="text">The String to convert.</param>
        </member>
        <member name="M:Impart.Text.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Text.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Text.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Text.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Text.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Text.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.Video">
            <summary>Video element.</summary>
        </member>
        <member name="P:Impart.Video.ID">
            <summary>The ID value of the instance. Returns null if ID is not set.</summary>
        </member>
        <member name="F:Impart.Video.Source">
            <summary>The Video source file.</summary>
        </member>
        <member name="F:Impart.Video.Size">
            <summary>The Video player size.</summary>
        </member>
        <member name="F:Impart.Video.Options">
            <summary>Options for the Video player.</summary>
        </member>
        <member name="P:Impart.Video.Attrs">
            <summary>The Attr values of the instance.</summary>
        </member>
        <member name="P:Impart.Video.ExtAttrs">
            <summary>The ExtAttr values of the instance.</summary>
        </member>
        <member name="P:Impart.Video.Impart#IElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Video.#ctor(System.String,Impart.Length,Impart.Length,Impart.VideoOptions)">
            <summary>Creates a Video instance.</summary>
            <param name="source">The Video source file.</param>
            <param name="width">The Video player width.</param>
            <param name="height">The Video player height.</param>
            <param name="options">Options for the Video player.</param>
        </member>
        <member name="M:Impart.Video.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Video.Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Video.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Video.Impart#IElement#Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="M:Impart.Video.Impart#IElement#Clone">
            <summary>Clones the IElement instance (including the internal ID).</summary>
        </member>
        <member name="M:Impart.Video.Impart#Internal#INested#First">
            <summary>Return the first part of the INested as a string.</summary>
        </member>
        <member name="M:Impart.Video.Impart#Internal#INested#Last">
            <summary>Return the last part of the INested as a string.</summary>
        </member>
        <member name="T:Impart.VideoOptions">
            <summary>Arguments for setting the Video player.</summary>
        </member>
        <member name="F:Impart.VideoOptions.ShowControls">
            <summary>Whether to show or hide the controls.</summary>
        </member>
        <member name="F:Impart.VideoOptions.Autoplay">
            <summary>Whether to autoplay the Video.</summary>
        </member>
        <member name="F:Impart.VideoOptions.Mute">
            <summary>Whether to start the Video muted.</summary>
        </member>
        <member name="M:Impart.VideoOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a VideoOptions instance.</summary>
            <param name="showControls">Whether to show or hide the controls.</param>
            <param name="autoplay">Whether to autoplay the Video.</param>
            <param name="mute">Whether to start the Video muted.</param>
        </member>
        <member name="T:Impart.Alignment">
            <summary>All alignment types.</summary>
        </member>
        <member name="F:Impart.Alignment.Left">
            <summary>Left alignment.</summary>
        </member>
        <member name="F:Impart.Alignment.Right">
            <summary>Right alignment.</summary>
        </member>
        <member name="F:Impart.Alignment.Center">
            <summary>Center alignment.</summary>
        </member>
        <member name="F:Impart.Alignment.Justify">
            <summary>Justify alignment.</summary>
        </member>
        <member name="T:Impart.Axis">
            <summary>All axis directions.</summary>
        </member>
        <member name="F:Impart.Axis.X">
            <summary>X-axis.</summary>
        </member>
        <member name="F:Impart.Axis.Y">
            <summary>Y-axis.</summary>
        </member>
        <member name="T:Impart.EListType">
            <summary>All list types.</summary>
        </member>
        <member name="F:Impart.EListType.Ordered">
            <summary>Ordered list.</summary>
        </member>
        <member name="F:Impart.EListType.Unordered">
            <summary>Unordered list.</summary>
        </member>
        <member name="T:Impart.TextType">
            <summary>All of the Text types.</summary>
        </member>
        <member name="F:Impart.TextType.Bold">
            <summary>Bold text.</summary>
        </member>
        <member name="F:Impart.TextType.Important">
            <summary>Important text.</summary>
        </member>
        <member name="F:Impart.TextType.Italic">
            <summary>Italic text.</summary>
        </member>
        <member name="F:Impart.TextType.Emphasize">
            <summary>Emphasized text.</summary>
        </member>
        <member name="F:Impart.TextType.Mark">
            <summary>Marked text.</summary>
        </member>
        <member name="F:Impart.TextType.Small">
            <summary>Small text.</summary>
        </member>
        <member name="F:Impart.TextType.Delete">
            <summary>Deleted text.</summary>
        </member>
        <member name="F:Impart.TextType.Insert">
            <summary>Inserted text.</summary>
        </member>
        <member name="F:Impart.TextType.Subscript">
            <summary>Subscript text.</summary>
        </member>
        <member name="F:Impart.TextType.Superscript">
            <summary>Superscript text.</summary>
        </member>
        <member name="F:Impart.TextType.Regular">
            <summary>Regular text.</summary>
        </member>
        <member name="T:Impart.WebSiteRequestArgs">
            <summary>The event arguments passed when a client requests a WebPage from the WebSite.</summary>
        </member>
        <member name="F:Impart.WebSiteRequestArgs.Request">
            <summary>The full request from the client.</summary>
        </member>
        <member name="F:Impart.WebSiteRequestArgs.Address">
            <summary>The IP address of the client.</summary>
        </member>
        <member name="M:Impart.WebSiteRequestArgs.#ctor(System.String,System.Net.IPAddress)">
            <summary>Create a WebSiteRequestArgs instance.</summary>
            <param name="request">The full request from the client.</param>
            <param name="address">The IP address of the client.</param>
        </member>
        <member name="T:Impart.Font">
            <summary>A font sourced from file(s).</summary>
        </member>
        <member name="M:Impart.Font.#ctor(System.String,System.String,Impart.FontType)">
            <summary>Creates a Font instance.</summary>
            <param name="name">The name for the font family.</param>
            <param name="url">The URL to the source file.</param>
            <param name="type">The type of file format.</param>
        </member>
        <member name="M:Impart.Font.#ctor(System.String,System.ValueTuple{System.String,Impart.FontType}[])">
            <summary>Creates a Font instance.</summary>
            <param name="name">The name for the font family.</param>
            <param name="args">An array of URLs to source files and those files' format types.</param>
        </member>
        <member name="M:Impart.Font.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.FontFamily">
            <summary>All main font families.</summary>
        </member>
        <member name="F:Impart.FontFamily.Arial">
            <summary>Arial font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Helvetica">
            <summary>Helvetica font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Verdana">
            <summary>Verdana font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Calibri">
            <summary>Calibri font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Noto">
            <summary>Noto font.</summary>
        </member>
        <member name="F:Impart.FontFamily.LucidaSans">
            <summary>LucidaSans font.</summary>
        </member>
        <member name="F:Impart.FontFamily.GillSans">
            <summary>GillSans font.</summary>
        </member>
        <member name="F:Impart.FontFamily.CenturyGothic">
            <summary>CenturyGothic font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Candara">
            <summary>Candara font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Futara">
            <summary>Futara font.</summary>
        </member>
        <member name="F:Impart.FontFamily.FranklinGothicMedium">
            <summary>FranklinGothicMedium font.</summary>
        </member>
        <member name="F:Impart.FontFamily.TrebuchetMS">
            <summary>TrebuchetMS font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Geneva">
            <summary>Geneva font.</summary>
        </member>
        <member name="F:Impart.FontFamily.SegoeUI">
            <summary>SegoeUI font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Optima">
            <summary>Optima font.</summary>
        </member>
        <member name="F:Impart.FontFamily.AvantaGarde">
            <summary>AvantaGarde font.</summary>
        </member>
        <member name="F:Impart.FontFamily.TimesNewRoman">
            <summary>TimesNewRoman font.</summary>
        </member>
        <member name="F:Impart.FontFamily.BigCaslon">
            <summary>BigCaslon font.</summary>
        </member>
        <member name="F:Impart.FontFamily.BodoniMT">
            <summary>BodoniMT font.</summary>
        </member>
        <member name="F:Impart.FontFamily.BookAntiqua">
            <summary>BookAntiqua font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Bookman">
            <summary>Bookman font.</summary>
        </member>
        <member name="F:Impart.FontFamily.NewCenturySchoolbook">
            <summary>NewCenturySchoolbook font.</summary>
        </member>
        <member name="F:Impart.FontFamily.CalistoMT">
            <summary>CalistoMT font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Cambria">
            <summary>Cambria font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Didot">
            <summary>Didot font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Garamond">
            <summary>Garamond font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Georgia">
            <summary>Georgia font.</summary>
        </member>
        <member name="F:Impart.FontFamily.GoudyOldStyle">
            <summary>GoudyOldStyle font.</summary>
        </member>
        <member name="F:Impart.FontFamily.HoeflerText">
            <summary>HoeflerText font.</summary>
        </member>
        <member name="F:Impart.FontFamily.LucidaBright">
            <summary>LucidaBright font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Palatino">
            <summary>Palatino font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Perpetua">
            <summary>Perpetua font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Rockwell">
            <summary>Rockwell font.</summary>
        </member>
        <member name="F:Impart.FontFamily.RockwellExtraBold">
            <summary>RockwellExtraBold font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Baskerville">
            <summary>Baskerville font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Consolas">
            <summary>Consolas font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Courier">
            <summary>Courier font.</summary>
        </member>
        <member name="F:Impart.FontFamily.CourierNew">
            <summary>CourierNew font.</summary>
        </member>
        <member name="F:Impart.FontFamily.LucidaConsole">
            <summary>LucidaConsole font.</summary>
        </member>
        <member name="F:Impart.FontFamily.LucidaSansTypewriter">
            <summary>LucidaSansTypewriter font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Monaco">
            <summary>Monaco font.</summary>
        </member>
        <member name="F:Impart.FontFamily.AndaleMono">
            <summary>AndaleMono font.</summary>
        </member>
        <member name="F:Impart.FontFamily.ComicSans">
            <summary>ComicSans font.</summary>
        </member>
        <member name="F:Impart.FontFamily.ComicSansMS">
            <summary>ComicSansMS font.</summary>
        </member>
        <member name="F:Impart.FontFamily.AppleChancery">
            <summary>AppleChancery font.</summary>
        </member>
        <member name="F:Impart.FontFamily.ZapfChancery">
            <summary>ZapfChancery font.</summary>
        </member>
        <member name="F:Impart.FontFamily.BradleyHand">
            <summary>BradleyHand font.</summary>
        </member>
        <member name="F:Impart.FontFamily.BrushScriptMT">
            <summary>BrushScriptMT font.</summary>
        </member>
        <member name="F:Impart.FontFamily.BrushScriptStd">
            <summary>BrushScriptStd font.</summary>
        </member>
        <member name="F:Impart.FontFamily.SnellRoundhan">
            <summary>SnellRoundhan font.</summary>
        </member>
        <member name="F:Impart.FontFamily.URWChancery">
            <summary>URWChancery font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Coronetscript">
            <summary>Coronetscript font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Florence">
            <summary>Florence font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Parkavenue">
            <summary>Parkavenue font.</summary>
        </member>
        <member name="F:Impart.FontFamily.Custom">
            <summary>Placeholder for a custom font.</summary>
        </member>
        <member name="T:Impart.FontList">
            <summary>Store a list of Fonts.</summary>
        </member>
        <member name="M:Impart.FontList.#ctor">
            <summary>Creates a FontList instance.</summary>
        </member>
        <member name="M:Impart.FontList.Add(Impart.Font)">
            <summary>Add a Font to the FontList.</summary>
            <param name="font">The Font to add.</param>
        </member>
        <member name="M:Impart.FontList.Clear">
            <summary>Remove all Fonts from the FontList.</summary>
        </member>
        <member name="M:Impart.FontList.AddRange(System.Collections.Generic.IEnumerable{Impart.Font})">
            <summary>Add multiple Fonts to the FontList.</summary>
            <param name="fonts">The Fonts to add.</param>
        </member>
        <member name="M:Impart.FontList.Insert(System.Int32,Impart.Font)">
            <summary>Add a Font to the FontList at the specified index.</summary>
            <param name="index">The index to add the Font at.</param>
            <param name="font">The Font to add.</param>
        </member>
        <member name="M:Impart.FontList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Impart.Font})">
            <summary>Add multiple Fonts to the FontList at the specified index.</summary>
            <param name="index">The index to add the Fonts at.</param>
            <param name="fonts">The Fonts to add.</param>
        </member>
        <member name="M:Impart.FontList.Remove(Impart.Font)">
            <summary>Remove a Font from the FontList.</summary>
            <param name="font">The Font to remove.</param>
        </member>
        <member name="M:Impart.FontList.RemoveAll(System.Predicate{Impart.Font})">
            <summary>Remove all Fonts that meet specific conditions from the FontList.</summary>
            <param name="conditions">The Font conditions.</param>
        </member>
        <member name="M:Impart.FontList.RemoveAt(System.Int32)">
            <summary>Remove a Font from the FontList at the specified index.</summary>
            <param name="index">The index to remove the Font at.</param>
        </member>
        <member name="M:Impart.FontList.RemoveRange(System.Int32,System.Int32)">
            <summary>Remove multiple Fonts from the FontList at the specified index.</summary>
            <param name="index">The index to remove the Fonts at.</param>
            <param name="count">The number of Fonts to remove after the index.</param>
        </member>
        <member name="T:Impart.FontType">
            <summary>All the Font format types.</summary>
        </member>
        <member name="F:Impart.FontType.WOFF">
            <summary>Web Open Font Format.</summary>
        </member>
        <member name="F:Impart.FontType.WOFF2">
            <summary>Web Open Font Format 2.</summary>
        </member>
        <member name="F:Impart.FontType.TTF">
            <summary>TrueType Font.</summary>
        </member>
        <member name="F:Impart.FontType.OTF">
            <summary>OpenType Font.</summary>
        </member>
        <member name="F:Impart.FontType.EOT">
            <summary>Embedded OpenType Font.</summary>
        </member>
        <member name="F:Impart.FontType.SVG">
            <summary>Scalable Vector Graphics.</summary>
        </member>
        <member name="T:Impart.GlobalStyles">
            <summary>Manage both global external Styles and global Styles.</summary>
        </member>
        <member name="F:Impart.GlobalStyles.Styles">
            <summary>The Styles that apply to every Webpage.</summary>
        </member>
        <member name="F:Impart.GlobalStyles.ExternalStyles">
            <summary>The external Styles that apply to every Webpage.</summary>
        </member>
        <member name="M:Impart.GlobalStyles.Add(Impart.Style)">
            <summary>Add a Style to every WebPage.</summary>
            <param name="style">The Style to add.</param>
        </member>
        <member name="M:Impart.GlobalStyles.AddExternal(System.String)">
            <summary>Add an external Style to every WebPage.</summary>
            <param name="url">The URL of the external Style to add.</param>
        </member>
        <member name="M:Impart.GlobalStyles.Remove(System.Int32)">
            <summary>Remove a Style from being added to every WebPage.</summary>
            <param name="index">The index of the Style to remove.</param>
        </member>
        <member name="M:Impart.GlobalStyles.RemoveExternal(System.Int32)">
            <summary>Remove an external Style from being added to every WebPage.</summary>
            <param name="index">The index of the URL of the external Style to be removed.</param>
        </member>
        <member name="T:Impart.IElement">
            <summary>IElement interface.</summary>
        </member>
        <member name="P:Impart.IElement.IOID">
            <summary>IOID value for the IElement.</summary>
        </member>
        <member name="M:Impart.IElement.Clone">
            <summary>Clones the IElement (including its IOID).</summary>
        </member>
        <member name="P:Impart.IElement.ExtAttrs">
            <summary>The external attributes of the IElement.</summary>
        </member>
        <member name="P:Impart.IElement.Attrs">
            <summary>The attributes of the IElement.</summary>
        </member>
        <member name="M:Impart.IElement.Reference">
            <summary>Create an ElementRef referencing the IElement</summary>
        </member>
        <member name="T:Impart.IStyleElement">
            <summary>IStyleElement interface.</summary>
        </member>
        <member name="P:Impart.IStyleElement.IOID">
            <summary>The Impart Object ID for the IStyleElement.</summary>
        </member>
        <member name="P:Impart.IStyleElement.ID">
            <summary>The ID for the IStyleElement.</summary>
        </member>
        <member name="T:Impart.Style">
            <summary>Style Elements with a certain ID.</summary>
        </member>
        <member name="P:Impart.Style.ID">
            <summary>The ID value of the Style.</summary>
        </member>
        <member name="F:Impart.Style.Attrs">
            <summary>The attribute values of the Style.</summary>
        </member>
        <member name="P:Impart.Style.Impart#IStyleElement#IOID">
            <summary>The internal ID of the instance.</summary>
        </member>
        <member name="M:Impart.Style.#ctor(System.String)">
            <summary>Creates a Style instance.</summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Impart.Style.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Style.Dispose">
            <summary>Dispose of the Style instance.</summary>
        </member>
        <member name="T:Impart.ColorSet">
            <summary>The class for a set of Colors.</summary>
        </member>
        <member name="M:Impart.ColorSet.#ctor(Impart.Color[])">
            <summary>Creates a ColorSet instance with Color[] as the entries.</summary>
            <param name="colors">The Colors to add.</param>
        </member>
        <member name="M:Impart.ColorSet.Sort(Impart.ColorSort,System.Int32)">
            <summary>Temporarily sorts the ColorSet and returns the value at an index.</summary>
            <param name="sort">The ColorSort sorting pattern.</param>
            <param name="i">The index value to return.</param>
        </member>
        <member name="P:Impart.ColorSet.Item(System.Int32)">
            <summary>Return the value at an index.</summary>
            <param name="i">The index value to return.</param>
        </member>
        <member name="T:Impart.ConvertColor">
            <summary>The class for managing Color conversions.</summary>
        </member>
        <member name="M:Impart.ConvertColor.ToHsl(Impart.Rgb)">
            <summary>Converts a Rgb instance to Hsl.</summary>
            <param name="rgb">The Rgb value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToHex(Impart.Rgb)">
            <summary>Converts a Rgb instance to Hex.</summary>
            <param name="rgb">The Rgb value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToRgb(Impart.Hsl)">
            <summary>Converts a Hsl instance to Rgb.</summary>
            <param name="hsl">The Hsl value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToHex(Impart.Hsl)">
            <summary>Converts a Hsl instance to Hex.</summary>
            <param name="hsl">The Hsl value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToRgb(Impart.Hex)">
            <summary>Converts a Hex instance to Rgb.</summary>
            <param name="hex">The Hex value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToRgb(Impart.Color)">
            <summary>Converts a Color instance to Rgb.</summary>
            <param name="color">The Color value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToHsl(Impart.Color)">
            <summary>Converts a Color instance to Hsl.</summary>
            <param name="color">The Color value to convert.</param>
        </member>
        <member name="M:Impart.ConvertColor.ToHex(Impart.Color)">
            <summary>Converts a Color instance to Hex.</summary>
            <param name="color">The Color value to convert.</param>
        </member>
        <member name="T:Impart.Color">
            <summary>Color base class.</summary>
        </member>
        <member name="M:Impart.Color.op_Implicit(System.String)~Impart.Color">
            <summary>Creates a Color instance.</summary>
            <param name="s">The String to convert.</param>
        </member>
        <member name="M:Impart.Color.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~Impart.Color">
            <summary>Creates a Color instance.</summary>
            <param name="r">The (int, int, int) to convert.</param>
        </member>
        <member name="M:Impart.Color.op_Implicit(System.ValueTuple{System.Single,System.Single,System.Single})~Impart.Color">
            <summary>Creates a Color instance.</summary>
            <param name="h">The (float, float, float) to convert.</param>
        </member>
        <member name="M:Impart.Color.Convert(System.Object)">
            <summary>Converts an Object into a Measurement instance.</summary>
            <param name="o">The object to convert.</param>
        </member>
        <member name="T:Impart.ColorSort">
            <summary>All methods of sorting ColorSets.</summary>
        </member>
        <member name="F:Impart.ColorSort.Light">
            <summary>Sort the Colorset from lightest to darkest.</summary>
        </member>
        <member name="F:Impart.ColorSort.Dark">
            <summary>Sort the Colorset from darkest to lightest.</summary>
        </member>
        <member name="F:Impart.ColorSort.Red">
            <summary>Sort the Colorset from reddest to non-reddest.</summary>
        </member>
        <member name="F:Impart.ColorSort.Blue">
            <summary>Sort the Colorset from bluest to non-bluest.</summary>
        </member>
        <member name="F:Impart.ColorSort.Green">
            <summary>Sort the Colorset from greenist to non-greenist.</summary>
        </member>
        <member name="T:Impart.Hex">
            <summary>The class for a HEX color.</summary>
        </member>
        <member name="M:Impart.Hex.#ctor(System.String)">
            <summary>Creates a Hex instance.</summary>
            <param name="hex">The HEX value.</param>
        </member>
        <member name="M:Impart.Hex.op_Equality(Impart.Hex,Impart.Hex)">
            <summary>Compares the equality of two Hex values.</summary>
            <param name="hex1">The first Hex value to compare.</param>
            <param name="hex2">The second Hex value to compare.</param>
        </member>
        <member name="M:Impart.Hex.op_Inequality(Impart.Hex,Impart.Hex)">
            <summary>Compares the inequality of two Hex values.</summary>
            <param name="hex1">The first Hex value to compare.</param>
            <param name="hex2">The second Hex value to compare.</param>
        </member>
        <member name="M:Impart.Hex.Equals(System.Object)">
            <summary>Compares the equality of this Hex instance and an Object value.</summary>
            <param name="obj">The Object to compare.</param>
        </member>
        <member name="M:Impart.Hex.GetHashCode">
            <summary>Returns a hash code for the current instance.</summary>
        </member>
        <member name="M:Impart.Hex.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Hex.op_Explicit(Impart.Hex)~System.String">
            <summary>Convert the Hex instance to a String.</summary>
            <param name="h">The Hex to convert.</param>
        </member>
        <member name="M:Impart.Hex.op_Implicit(System.String)~Impart.Hex">
            <summary>Convert the String instance to Hex.</summary>
            <param name="s">The String to convert.</param>
        </member>
        <member name="F:Impart.Hex.Red">
            <summary>Red represented by Hex.</summary>
        </member>
        <member name="F:Impart.Hex.Orange">
            <summary>Orange represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Yellow">
            <summary>Yellow represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Lime">
            <summary>Lime represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.DarkGreen">
            <summary>Dark green represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Green">
            <summary>Green represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.LightGray">
            <summary>Light gray represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Aqua">
            <summary>Aqua represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.LightBlue">
            <summary>Light blue represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Blue">
            <summary>Blue represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.DarkBlue">
            <summary>Dark blue represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Pink">
            <summary>Pink represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Magenta">
            <summary>Magenta represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Purple">
            <summary>Purple represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.White">
            <summary>White represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Gray">
            <summary>Gray represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.DarkGray">
            <summary>Dark gray represented by Hex</summary>
        </member>
        <member name="F:Impart.Hex.Black">
            <summary>Black represented by Hex</summary>
        </member>
        <member name="T:Impart.Hsl">
            <summary>The class for a HSL color.</summary>
        </member>
        <member name="M:Impart.Hsl.#ctor(System.Single,System.Single,System.Single)">
            <summary>Creates a Hsl instance.</summary>
            <param name="h">The H value.</param>
            <param name="s">The S value.</param>
            <param name="l">The L value.</param>
        </member>
        <member name="M:Impart.Hsl.#ctor(System.ValueTuple{System.Single,System.Single,System.Single})">
            <summary>Creates a Hsl instance.</summary>
            <param name="hsl">The HSL value.</param>
        </member>
        <member name="M:Impart.Hsl.op_Equality(Impart.Hsl,Impart.Hsl)">
            <summary>Compares the equality of two Hsl values.</summary>
            <param name="hsl1">The first Hsl value to compare.</param>
            <param name="hsl2">The second Hsl value to compare.</param>
        </member>
        <member name="M:Impart.Hsl.op_Inequality(Impart.Hsl,Impart.Hsl)">
            <summary>Compares the inequality of two Hsl values.</summary>
            <param name="hsl1">The first Hsl value to compare.</param>
            <param name="hsl2">The second Hsl value to compare.</param>
        </member>
        <member name="M:Impart.Hsl.Equals(System.Object)">
            <summary>Compares the equality of this Hsl instance and an Object value.</summary>
            <param name="obj">The Object to compare.</param>
        </member>
        <member name="M:Impart.Hsl.GetHashCode">
            <summary>Returns a hash code for the current instance.</summary>
        </member>
        <member name="M:Impart.Hsl.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Hsl.op_Explicit(Impart.Hsl)~System.ValueTuple{System.Single,System.Single,System.Single}">
            <summary>Convert the Hsl instance to a (float, float, float).</summary>
            <param name="h">The Hsl to convert.</param>
        </member>
        <member name="M:Impart.Hsl.op_Implicit(System.ValueTuple{System.Single,System.Single,System.Single})~Impart.Hsl">
            <summary>Convert the (float, float, float) instance to Hsl.</summary>
            <param name="h">The (float, float, float) to convert.</param>
        </member>
        <member name="F:Impart.Hsl.Red">
            <summary>Red represented by Hsl.</summary>
        </member>
        <member name="F:Impart.Hsl.Orange">
            <summary>Orange represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Yellow">
            <summary>Yellow represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Lime">
            <summary>Lime represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.DarkGreen">
            <summary>Dark green represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Green">
            <summary>Green represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.LightGray">
            <summary>Light gray represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Aqua">
            <summary>Aqua represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.LightBlue">
            <summary>Light blue represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Blue">
            <summary>Blue represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.DarkBlue">
            <summary>Dark blue represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Pink">
            <summary>Pink represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Magenta">
            <summary>Magenta represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Purple">
            <summary>Purple represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.White">
            <summary>White represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Gray">
            <summary>Gray represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.DarkGray">
            <summary>Dark gray represented by Hsl</summary>
        </member>
        <member name="F:Impart.Hsl.Black">
            <summary>Black represented by Hsl</summary>
        </member>
        <member name="T:Impart.Rgb">
            <summary>The class for a RGB color.</summary>
        </member>
        <member name="M:Impart.Rgb.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Creates a Rgb instance.</summary>
            <param name="r">The R value.</param>
            <param name="g">The G value.</param>
            <param name="b">The B value.</param>
        </member>
        <member name="M:Impart.Rgb.#ctor(System.ValueTuple{System.Int32,System.Int32,System.Int32})">
            <summary>Creates a Rgb instance.</summary>
            <param name="rgb">The RGB value.</param>
        </member>
        <member name="M:Impart.Rgb.op_Equality(Impart.Rgb,Impart.Rgb)">
            <summary>Compares the equality of two Rgb values.</summary>
            <param name="rgb1">The first Rgb value to compare.</param>
            <param name="rgb2">The second Rgb value to compare.</param>
        </member>
        <member name="M:Impart.Rgb.op_Inequality(Impart.Rgb,Impart.Rgb)">
            <summary>Compares the inequality of two Rgb values.</summary>
            <param name="rgb1">The first Rgb value to compare.</param>
            <param name="rgb2">The second Rgb value to compare.</param>
        </member>
        <member name="M:Impart.Rgb.Equals(System.Object)">
            <summary>Compares the equality of this Rgb instance and an Object value.</summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Impart.Rgb.GetHashCode">
            <summary>Returns a hash code for the current instance.</summary>
        </member>
        <member name="M:Impart.Rgb.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Rgb.op_Explicit(Impart.Rgb)~System.ValueTuple{System.Int32,System.Int32,System.Int32}">
            <summary>Convert the Rgb instance to a (int, int, int).</summary>
            <param name="r">The Rgb to convert.</param>
        </member>
        <member name="M:Impart.Rgb.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32})~Impart.Rgb">
            <summary>Convert the (int, int, int) instance to Rgb.</summary>
            <param name="r">The (int, int, int) to convert.</param>
        </member>
        <member name="F:Impart.Rgb.Red">
            <summary>Red represented by Rgb.</summary>
        </member>
        <member name="F:Impart.Rgb.Orange">
            <summary>Orange represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Yellow">
            <summary>Yellow represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Lime">
            <summary>Lime represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.DarkGreen">
            <summary>Dark green represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Green">
            <summary>Green represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.LightGray">
            <summary>Light gray represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Aqua">
            <summary>Aqua represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.LightBlue">
            <summary>Light blue represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Blue">
            <summary>Blue represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.DarkBlue">
            <summary>Dark blue represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Pink">
            <summary>Pink represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Magenta">
            <summary>Magenta represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Purple">
            <summary>Purple represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.White">
            <summary>White represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Gray">
            <summary>Gray represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.DarkGray">
            <summary>Dark gray represented by Rgb</summary>
        </member>
        <member name="F:Impart.Rgb.Black">
            <summary>Black represented by Rgb</summary>
        </member>
        <member name="T:Impart.Length">
            <summary>Length base class.</summary>
        </member>
        <member name="M:Impart.Length.op_Implicit(System.Single)~Impart.Length">
            <summary>Creates a Length instance.</summary>
            <param name="f">The float to convert.</param>
        </member>
        <member name="M:Impart.Length.op_Implicit(System.Int32)~Impart.Length">
            <summary>Creates a Length instance.</summary>
            <param name="i">The integer to convert.</param>
        </member>
        <member name="M:Impart.Length.Convert(System.Object)">
            <summary>Converts an Object into a Length instance.</summary>
            <param name="o">The Object to convert.</param>
        </member>
        <member name="T:Impart.Percent">
            <summary>Store a percent value.</summary>
        </member>
        <member name="M:Impart.Percent.#ctor(System.Single)">
            <summary>Creates a Percent instance.</summary>
            <param name="percent">The percent value.</param>
        </member>
        <member name="M:Impart.Percent.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Percent.op_Implicit(Impart.Percent)~System.Single">
            <summary>Convert the Percent instance to a Float.</summary>
            <param name="p">The Percent to convert.</param>
        </member>
        <member name="M:Impart.Percent.op_Implicit(System.Single)~Impart.Percent">
            <summary>Convert the Float instance to Percent.</summary>
            <param name="f">The Float to convert.</param>
        </member>
        <member name="T:Impart.Pixels">
            <summary>Store a pixel value.</summary>
        </member>
        <member name="M:Impart.Pixels.#ctor(System.Int32)">
            <summary>Creates a Pixels instance.</summary>
            <param name="pixels">The pixels value.</param>
        </member>
        <member name="M:Impart.Pixels.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Pixels.op_Implicit(Impart.Pixels)~System.Int32">
            <summary>Convert the Pixels instance to an Int.</summary>
            <param name="p">The Pixels to convert.</param>
        </member>
        <member name="M:Impart.Pixels.op_Implicit(System.Int32)~Impart.Pixels">
            <summary>Convert the Int instance to Pixels.</summary>
            <param name="i">The Int to convert.</param>
        </member>
        <member name="T:Impart.ViewHeight">
            <summary>Store a view height value (a view height is a percent of the viewport height).</summary>
        </member>
        <member name="M:Impart.ViewHeight.#ctor(System.Decimal)">
            <summary>Creates a ViewHeight instance.</summary>
            <param name="viewHeight">The view length value.</param>
        </member>
        <member name="M:Impart.ViewHeight.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.ViewHeight.op_Implicit(Impart.ViewHeight)~System.Decimal">
            <summary>Convert the ViewHeight instance to a Decimal.</summary>
            <param name="v">The ViewHeight to convert.</param>
        </member>
        <member name="M:Impart.ViewHeight.op_Implicit(System.Decimal)~Impart.ViewHeight">
            <summary>Convert the Decimal instance to ViewHeight.</summary>
            <param name="d">The Decimal to convert.</param>
        </member>
        <member name="T:Impart.ViewWidth">
            <summary>Store a view width value (a view width is a percent of the viewport width).</summary>
        </member>
        <member name="M:Impart.ViewWidth.#ctor(System.Double)">
            <summary>Creates a ViewWidth instance.</summary>
            <param name="viewWidth">The view width value.</param>
        </member>
        <member name="M:Impart.ViewWidth.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.ViewWidth.op_Implicit(Impart.ViewWidth)~System.Double">
            <summary>Convert the ViewWidth instance to a Double.</summary>
            <param name="v">The ViewWidth to convert.</param>
        </member>
        <member name="M:Impart.ViewWidth.op_Implicit(System.Double)~Impart.ViewWidth">
            <summary>Convert the Double instance to ViewWidth.</summary>
            <param name="d">The Double to convert.</param>
        </member>
        <member name="T:Impart.Milliseconds">
            <summary>Store milliseconds as a Float.</summary>
        </member>
        <member name="M:Impart.Milliseconds.#ctor(System.Single)">
            <summary>Creates a Milliseconds instance.</summary>
            <param name="milliseconds">The Milliseconds value.</param>
        </member>
        <member name="M:Impart.Milliseconds.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Milliseconds.op_Implicit(Impart.Milliseconds)~System.Single">
            <summary>Convert the Milliseconds instance to a Float.</summary>
            <param name="s">The Milliseconds to convert.</param>
        </member>
        <member name="M:Impart.Milliseconds.op_Implicit(System.Single)~Impart.Milliseconds">
            <summary>Convert the Float instance to Milliseconds.</summary>
            <param name="i">The Float to convert.</param>
        </member>
        <member name="F:Impart.Milliseconds.Second">
            <summary>A second represented by Milliseconds.</summary>
        </member>
        <member name="F:Impart.Milliseconds.Minute">
            <summary>A minute represented by Milliseconds.</summary>
        </member>
        <member name="T:Impart.Seconds">
            <summary>Store seconds as an Integer.</summary>
        </member>
        <member name="M:Impart.Seconds.#ctor(System.Int32)">
            <summary>Creates a Seconds instance.</summary>
            <param name="seconds">The seconds value.</param>
        </member>
        <member name="M:Impart.Seconds.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="M:Impart.Seconds.op_Implicit(Impart.Seconds)~System.Int32">
            <summary>Convert the Seconds instance to an Int.</summary>
            <param name="s">The Seconds to convert.</param>
        </member>
        <member name="M:Impart.Seconds.op_Implicit(System.Int32)~Impart.Seconds">
            <summary>Convert the Int instance to Seconds.</summary>
            <param name="i">The Int to convert.</param>
        </member>
        <member name="F:Impart.Seconds.Minute">
            <summary>A minute represented by Seconds.</summary>
        </member>
        <member name="F:Impart.Seconds.Hour">
            <summary>A hour represented by Seconds.</summary>
        </member>
        <member name="T:Impart.Time">
            <summary>Time base class.</summary>
        </member>
        <member name="M:Impart.Time.op_Implicit(System.Single)~Impart.Time">
            <summary>Creates a Time instance.</summary>
            <param name="f">The float to convert.</param>
        </member>
        <member name="M:Impart.Time.op_Implicit(System.Int32)~Impart.Time">
            <summary>Creates a Time instance.</summary>
            <param name="i">The integer to convert.</param>
        </member>
        <member name="M:Impart.Time.Convert(System.Object)">
            <summary>Converts an Object into a Time instance.</summary>
            <param name="o">The Object to convert.</param>
        </member>
        <member name="T:Impart.WebPage">
            <summary>Generate a webpage for a Website.</summary>
        </member>
        <member name="P:Impart.WebPage.Title">
            <summary>The title value of the WebPage.</summary>
        </member>
        <member name="F:Impart.WebPage.Attrs">
            <summary>The Attribute values of the WebPage.</summary>
        </member>
        <member name="F:Impart.WebPage.Fonts">
            <summary>The Font values of the WebPage.</summary>
        </member>
        <member name="M:Impart.WebPage.#ctor">
            <summary>Creates a WebPage instance.</summary>
        </member>
        <member name="M:Impart.WebPage.Get``1(System.Func{``0,System.Boolean})">
            <summary>Gets the specified IElement from the WebPage.</summary>
            <param name="selector">The specifications to be met by the IElement.</param>
        </member>
        <member name="M:Impart.WebPage.GetMany``1(System.Func{``0,System.Boolean})">
            <summary>Gets the many specified IElements from the WebPage.</summary>
            <param name="selector">The specifications to be met by the IElements.</param>
        </member>
        <member name="M:Impart.WebPage.Exists(Impart.ElementRef)">
            <summary>Checks if an Element exists.</summary>
            <param name="element">The Element reference to check.</param>
        </member>
        <member name="M:Impart.WebPage.Exists(Impart.IElement)">
            <summary>Checks if an Element exists.</summary>
            <param name="element">The Element instance to check.</param>
        </member>
        <member name="M:Impart.WebPage.Exists(Impart.IStyleElement)">
            <summary>Checks if an IStyleElement exists.</summary>
            <param name="element">The instance of the IStyleElement to check.</param>
        </member>
        <member name="M:Impart.WebPage.Remove(Impart.IElement)">
            <summary>Removes an IElement.</summary>
            <param name="element">The instance of the IElement to remove.</param>
        </member>
        <member name="M:Impart.WebPage.Remove(Impart.IStyleElement)">
            <summary>Removes an IStyleElement.</summary>
            <param name="element">The instance of the IStyleElement to remove.</param>
        </member>
        <member name="M:Impart.WebPage.Edit(Impart.IElement)">
            <summary>Edits an IElement.</summary>
            <param name="element">The instance of the IElement to edit.</param>
        </member>
        <member name="M:Impart.WebPage.Edit(Impart.IStyleElement)">
            <summary>Edits an IStyleElement.</summary>
            <param name="element">The instance of the IStyleElement to edit.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Style)">
            <summary>Adds a Style.</summary>
            <param name="style">The Style instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(System.Int32)">
            <summary>Removes a Style.</summary>
            <param name="index">The index of the Style to remove.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Text)">
            <summary>Adds a Text to the WebPage.</summary>
            <param name="text">The Text instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Image)">
            <summary>Adds an Image to the WebPage.</summary>
            <param name="image">The Image instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Header)">
            <summary>Adds a Header to the WebPage.</summary>
            <param name="header">The Header instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Link)">
            <summary>Adds a Link to the WebPage.</summary>
            <param name="link">The Link instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Table)">
            <summary>Adds a Table to the WebPage.</summary>
            <param name="table">The Table instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Division)">
            <summary>Adds a Division to the WebPage.</summary>
            <param name="division">The Division instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add``1(Impart.EList{``0})">
            <summary>Adds an EList to the WebPage.</summary>
            <param name="eList">The EList instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Scrollbar)">
            <summary>Adds a Scrollbar to the WebPage.</summary>
            <param name="scrollbar">The Scrollbar instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Form)">
            <summary>Adds a Form to the WebPage.</summary>
            <param name="form">The Form instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Button)">
            <summary>Adds a Button to the WebPage.</summary>
            <param name="button">The Button instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Nest)">
            <summary>Adds a Nest to the WebPage.</summary>
            <param name="nest">The Nest instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Video)">
            <summary>Adds a Video to the WebPage.</summary>
            <param name="video">The Video instance to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddExternalStyle(System.String)">
            <summary>Adds an external Style to the WebPage.</summary>
            <param name="url">The URL of the external Style to add.</param>
        </member>
        <member name="M:Impart.WebPage.Add(Impart.Animation)">
            <summary>Adds an Animation to the WebPage.</summary>
            <param name="animation">The Animation to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Text[])">
            <summary>Adds multiple Texts to the WebPage.</summary>
            <param name="texts">The Texts to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Image[])">
            <summary>Adds multiple Images to the WebPage.</summary>
            <param name="images">The Images to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Header[])">
            <summary>Adds multiple Headers to the WebPage.</summary>
            <param name="headers">The Headers to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Link[])">
            <summary>Adds multiple Links to the WebPage.</summary>
            <param name="links">The Links to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Table[])">
            <summary>Adds multiple Tables to the WebPage.</summary>
            <param name="tables">The Tables to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Division[])">
            <summary>Adds multiple Divisions to the WebPage.</summary>
            <param name="divisions">The Divisions to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany``1(Impart.EList{``0}[])">
            <summary>Adds multiple ELists to the WebPage.</summary>
            <param name="eLists">The ELists to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Form[])">
            <summary>Adds multiple Forms to the WebPage.</summary>
            <param name="forms">The Forms to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Button[])">
            <summary>Adds multiple Buttons to the WebPage.</summary>
            <param name="buttons">The Buttons to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Nest[])">
            <summary>Adds multiple Nests to the WebPage.</summary>
            <param name="nests">The Nests to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Video[])">
            <summary>Adds multiple Videos to the WebPage.</summary>
            <param name="videos">The Videos to add.</param>
        </member>
        <member name="M:Impart.WebPage.AddMany(Impart.Animation[])">
            <summary>Adds multiple Animations to the WebPage.</summary>
            <param name="animations">The Animations to add.</param>
        </member>
        <member name="M:Impart.WebPage.Remove(System.Int32)">
            <summary>Removes an external Style from the WebPage.</summary>
            <param name="index">The index of the URL of the external Style to remove.</param>
        </member>
        <member name="M:Impart.WebPage.ForceRender">
            <summary>Forces the WebPage to be rendered again, regardless of any new changes.</summary>
        </member>
        <member name="M:Impart.WebPage.ToString">
            <summary>Returns the instance as a String.</summary>
        </member>
        <member name="T:Impart.WebSite">
            <summary>Host WebPages.</summary>
        </member>
        <member name="P:Impart.WebSite.Running">
            <summary>Whether the WebSite is currently running. Default is false.</summary>
        </member>
        <member name="F:Impart.WebSite.Pages">
            <summary>A Dictionary of all the WebPages included in the WebSite. Each key is a URL path, while each value is a WebPage accessed via that path. To set a 404 WebPage, simply name the path "404".</summary>
        </member>
        <member name="F:Impart.WebSite.Listener">
            <summary>The underlying TCP listener the WebSite uses. Do not manually start or stop as the listener thread depends on the WebSite methods to do so.</summary>
        </member>
        <member name="F:Impart.WebSite.OnRequest">
            <summary>Called when a client requests a WebPage.</summary>
        </member>
        <member name="F:Impart.WebSite.OnListener">
            <summary>Called just before the TCP listener begins listening in a new thread.</summary>
        </member>
        <member name="M:Impart.WebSite.#ctor(Impart.WebPage,System.Int32)">
            <summary>Creates a WebSite instance.</summary>
            <param name="page">The default WebPage.</param>
            <param name="port">The local port to use. (Default is 5050)</param>
        </member>
        <member name="M:Impart.WebSite.Start">
            <summary>Start the WebSite.</summary>
        </member>
        <member name="M:Impart.WebSite.Stop">
            <summary>Stop the WebSite. This will also close the TCP listener thread.</summary>
        </member>
    </members>
</doc>
